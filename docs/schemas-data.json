{
  "schemas": [
    {
      "namespace": "aave",
      "name": "AAVE Protocol API",
      "description": "Fetch and analyze liquidity and account data from AAVE v3 via The Graph subgraph",
      "tags": [
        "defi",
        "lending",
        "protocol"
      ],
      "docs": [
        "https://thegraph.com/explorer/subgraphs/aave/protocol-v3",
        "https://docs.aave.com/developers/"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [
        "THEGRAPH_API_KEY"
      ],
      "hasApiKey": true,
      "path": "aave/aave.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/aave/aave.mjs",
      "routes": {
        "getReserves": {
          "requestMethod": "POST",
          "description": "Returns AAVE reserves data including symbols, liquidity, rates, and timestamps from Ethereum mainnet.",
          "route": "/api/{{THEGRAPH_API_KEY}}/subgraphs/id/Cd2gEDVeqnjBn1hSeqFMitw8Q1iiyV9FYUZkLNRcL87g",
          "hasTests": true
        },
        "getUserData": {
          "requestMethod": "POST",
          "description": "Fetches user-specific reserve data like debt and balances from AAVE subgraph.",
          "route": "/api/{{THEGRAPH_API_KEY}}/subgraphs/id/Cd2gEDVeqnjBn1hSeqFMitw8Q1iiyV9FYUZkLNRcL87g",
          "hasTests": true
        },
        "getProtocolData": {
          "requestMethod": "POST",
          "description": "Get general AAVE protocol statistics and market overview.",
          "route": "/api/{{THEGRAPH_API_KEY}}/subgraphs/id/Cd2gEDVeqnjBn1hSeqFMitw8Q1iiyV9FYUZkLNRcL87g",
          "hasTests": true
        }
      },
      "routeCount": 3
    },
    {
      "namespace": "alternative",
      "name": "FearGreedIndex",
      "description": "Fetches and analyzes the Crypto Fear & Greed Index from alternative.me.",
      "tags": [],
      "docs": [
        "https://alternative.me/crypto/api/"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "alternative-me/fearAndGreed.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/alternative-me/fearAndGreed.mjs",
      "routes": {
        "getCurrentFng": {
          "requestMethod": "GET",
          "description": "Retrieve the latest Fear & Greed Index.",
          "route": "/",
          "hasTests": true
        },
        "getHistoricalFng": {
          "requestMethod": "GET",
          "description": "Get historical Fear & Greed Index values for past days.",
          "route": "/",
          "hasTests": true
        },
        "analyzeFngTrend": {
          "requestMethod": "GET",
          "description": "Analyze the trend of the Fear & Greed Index over a number of days.",
          "route": "/",
          "hasTests": true
        }
      },
      "routeCount": 3
    },
    {
      "namespace": "berlinevents",
      "name": "Berlin Events API",
      "description": "Access to Berlin city events data including markets, festivals, and public assemblies",
      "tags": [],
      "docs": [
        "https://www.berlin.de/"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "berlin-de/events.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/berlin-de/events.mjs",
      "routes": {
        "markets_festivals": {
          "requestMethod": "GET",
          "description": "Weekly and flea markets in Berlin",
          "route": "/sen/web/service/maerkte-feste/wochen-troedelmaerkte/index.php/index/all.json",
          "hasTests": true
        },
        "street_festivals": {
          "requestMethod": "GET",
          "description": "Street and folk festivals in Berlin",
          "route": "/sen/web/service/maerkte-feste/strassen-volksfeste/index.php/index/all.json",
          "hasTests": true
        },
        "christmas_markets": {
          "requestMethod": "GET",
          "description": "Christmas markets in Berlin",
          "route": "/sen/web/service/maerkte-feste/weihnachtsmaerkte/index.php/index/all.json",
          "hasTests": true
        },
        "police_assemblies": {
          "requestMethod": "GET",
          "description": "Police registered assemblies and demonstrations in Berlin",
          "route": "/polizei/service/versammlungsbehoerde/versammlungen-aufzuege/index.php/index/all.json",
          "hasTests": true
        }
      },
      "routeCount": 4
    },
    {
      "namespace": "berlinfunds",
      "name": "Berlin Funds API",
      "description": "Access to Berlin funding opportunities and educational programs",
      "tags": [],
      "docs": [
        "https://www.berlin.de/"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "berlin-de/funds.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/berlin-de/funds.mjs",
      "routes": {
        "funding_opportunities": {
          "requestMethod": "GET",
          "description": "Funding opportunities from Berlin-Treptow-Köpenick district",
          "route": "/ba-treptow-koepenick/politik-und-verwaltung/beauftragte/integration/foerderungen-finanzen/simplesearch/index.php/index/all.json",
          "hasTests": true
        },
        "continuing_education": {
          "requestMethod": "GET",
          "description": "Continuing education and professional development courses (Bildungszeit)",
          "route": "/sen/arbeit/weiterbildung/bildungszeit/suche/index.php/index/all.json",
          "hasTests": true
        }
      },
      "routeCount": 2
    },
    {
      "namespace": "berlinvhs",
      "name": "Berlin VHS API",
      "description": "Access to Berlin Volkshochschule (VHS) course catalog with detailed course information",
      "tags": [],
      "docs": [
        "https://www.vhsit.berlin.de/"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "berlin-de/vhs.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/berlin-de/vhs.mjs",
      "routes": {
        "all_courses": {
          "requestMethod": "GET",
          "description": "Complete catalog of VHS courses across all Berlin districts",
          "route": "/VHSKURSE/OpenData/Kurse.json",
          "hasTests": true
        }
      },
      "routeCount": 1
    },
    {
      "namespace": "berlinwfs",
      "name": "Berlin WFS Locations API",
      "description": "Access to Berlin geographic data including dog parks and BBQ areas via WFS services",
      "tags": [],
      "docs": [
        "https://gdi.berlin.de/"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "berlin-de/wfs-locations.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/berlin-de/wfs-locations.mjs",
      "routes": {
        "dog_parks": {
          "requestMethod": "GET",
          "description": "All dog parks (Hundefreiläufe) in Berlin as GeoJSON FeatureCollection",
          "route": "/services/wfs/hundefreilauf?SERVICE=WFS&REQUEST=GetFeature&VERSION=2.0.0&TYPENAMES=hundefreilauf%3Ahundefreilauf&OUTPUTFORMAT=application/json",
          "hasTests": true
        },
        "bbq_areas": {
          "requestMethod": "GET",
          "description": "All BBQ areas (Grillflächen) in Berlin as GeoJSON FeatureCollection",
          "route": "/services/wfs/grillflaechen?SERVICE=WFS&REQUEST=GetFeature&VERSION=2.0.0&TYPENAMES=grillflaechen%3Agrillflaechen&OUTPUTFORMAT=application/json",
          "hasTests": true
        }
      },
      "routeCount": 2
    },
    {
      "namespace": "bicscan",
      "name": "BICScan API",
      "description": "Risk score and asset scanning API for blockchain addresses via BICScan.",
      "tags": [
        "security",
        "risk",
        "scanning"
      ],
      "docs": [
        "https://api.bicscan.io/docs"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [
        "BICSCAN_API_KEY"
      ],
      "hasApiKey": true,
      "path": "bicscan/bicscan.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/bicscan/bicscan.mjs",
      "routes": {
        "getRiskScore": {
          "requestMethod": "POST",
          "description": "Retrieves a risk score from 0 (safe) to 100 (high risk) for a given crypto address or domain.",
          "route": "/",
          "hasTests": true
        },
        "getAssets": {
          "requestMethod": "POST",
          "description": "Fetches the asset holdings of a given crypto address using OFAC engine.",
          "route": "/",
          "hasTests": true
        }
      },
      "routeCount": 2
    },
    {
      "namespace": "bitget",
      "name": "Bitget Crypto Tools",
      "description": "Provides crypto data utilities like token prices, announcements, and coin info via Bitget API.",
      "tags": [
        "production",
        "exchange",
        "trading",
        "price"
      ],
      "docs": [
        "https://www.bitget.com/api-doc"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "bitget/bitget.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/bitget/bitget.mjs",
      "routes": {
        "getTokenPrice": {
          "requestMethod": "GET",
          "description": "Get the current price of a specific token in USDT pair",
          "route": "/api/v2/spot/market/tickers",
          "hasTests": true
        },
        "getAnnoucements": {
          "requestMethod": "GET",
          "description": "Search for cryptocurrency announcements within the last month by type",
          "route": "/api/v2/public/annoucements",
          "hasTests": true
        },
        "getCoinInfo": {
          "requestMethod": "GET",
          "description": "Get full metadata and chain support info for a spot coin",
          "route": "/api/v2/spot/public/coins",
          "hasTests": true
        }
      },
      "routeCount": 3
    },
    {
      "namespace": "blockberry",
      "name": "Blockberry Mina Mainnet API",
      "description": "Mina blockchain data API for blocks, accounts, and ZkApps (working endpoints only)",
      "tags": [
        "production",
        "blockchain",
        "explorer",
        "mina"
      ],
      "docs": [
        "https://docs.blockberry.one/",
        "https://docs.blockberry.one/reference/mina-mainnet-quickstart"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [
        "BLOCKBERRY_API_KEY"
      ],
      "hasApiKey": true,
      "path": "blockberry-one/mina-mainnet.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/blockberry-one/mina-mainnet.mjs",
      "routes": {
        "getDashboardInfo": {
          "requestMethod": "GET",
          "description": "Get key Mina blockchain parameters including price, supply, block height, and validator count",
          "route": "/info",
          "hasTests": true
        },
        "getAccountByHash": {
          "requestMethod": "GET",
          "description": "Get detailed account information by public key hash",
          "route": "/accounts/{publicKeyHash}",
          "hasTests": true
        },
        "getAccountBalance": {
          "requestMethod": "GET",
          "description": "Get current balance for a specific Mina account",
          "route": "/accounts/{publicKeyHash}/balance",
          "hasTests": true
        },
        "getBlocks": {
          "requestMethod": "GET",
          "description": "Get list of Mina blocks (canonical and orphaned) with pagination",
          "route": "/blocks",
          "hasTests": true
        },
        "getZkAppTransactions": {
          "requestMethod": "GET",
          "description": "Get list of ZkApp transactions with filtering options",
          "route": "/zkapps/transactions",
          "hasTests": true
        },
        "getZkAppByAddress": {
          "requestMethod": "GET",
          "description": "Get ZkApp information by account address",
          "route": "/zkapps/{address}",
          "hasTests": true
        }
      },
      "routeCount": 6
    },
    {
      "namespace": "blocknative",
      "name": "Gas Price Estimator",
      "description": "Accurate next-block gas price predictions for Ethereum, Bitcoin, and other supported chains.",
      "tags": [
        "new"
      ],
      "docs": [
        "https://docs.blocknative.com"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [
        "BLOCKNATIVE_API_KEY"
      ],
      "hasApiKey": true,
      "path": "blocknative/gasprice.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/blocknative/gasprice.mjs",
      "routes": {
        "getGasPrices": {
          "requestMethod": "GET",
          "description": "Returns a range of gas price estimates for the next block across defined confidence levels.",
          "route": "/gasprices/blockprices",
          "hasTests": true
        }
      },
      "routeCount": 1
    },
    {
      "namespace": "bridgeRates",
      "name": "LiFi Bridge API",
      "description": "Fetches bridge quotes, supported chains, tools, and cross-chain transfer data from LiFi API",
      "tags": [
        "bridge",
        "crosschain",
        "defi"
      ],
      "docs": [
        "https://docs.li.fi/",
        "https://li.quest/v1"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "bridgerates/bridgerates.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/bridgerates/bridgerates.mjs",
      "routes": {
        "getSupportedChains": {
          "requestMethod": "GET",
          "description": "Get information about all currently supported chains for cross-chain transfers.",
          "route": "/chains",
          "hasTests": true
        },
        "getSupportedTools": {
          "requestMethod": "GET",
          "description": "Get information about the bridges and exchanges available through LiFi service.",
          "route": "/tools",
          "hasTests": true
        },
        "getConnections": {
          "requestMethod": "GET",
          "description": "Returns all possible connections based on chain filters. At least one filter parameter is required.",
          "route": "/connections",
          "hasTests": true
        },
        "getTransferStatus": {
          "requestMethod": "GET",
          "description": "Check the status of a cross-chain transfer by transaction hash.",
          "route": "/status",
          "hasTests": true
        }
      },
      "routeCount": 4
    },
    {
      "namespace": "bscscan",
      "name": "BSC Scan",
      "description": "BSC Scan API",
      "tags": [
        "test"
      ],
      "docs": [
        "https://docs.bscscan.com/"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [
        "BSCSCAN_API_KEY"
      ],
      "hasApiKey": true,
      "path": "bscscan/getContractBinance.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/bscscan/getContractBinance.mjs",
      "routes": {
        "getContractABI": {
          "requestMethod": "GET",
          "description": "Returns the Contract ABI of a verified smart contract.",
          "route": "/api",
          "hasTests": true
        },
        "getContractSourceCode": {
          "requestMethod": "GET",
          "description": "Returns the Solidity source code of a verified smart contract.",
          "route": "/api",
          "hasTests": true
        }
      },
      "routeCount": 2
    },
    {
      "namespace": "chainlink",
      "name": "ExampleName",
      "description": "A short description of the schema purpose",
      "tags": [
        "oracle",
        "price",
        "feeds"
      ],
      "docs": [
        "https://docs.chain.link/data-feeds/price-feeds/addresses"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [
        "INFURA_API_KEY"
      ],
      "hasApiKey": true,
      "path": "chainlink/getLatestPrices.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/chainlink/getLatestPrices.mjs",
      "routes": {
        "getAvailableChains": {
          "requestMethod": "GET",
          "description": "Fetches the latest price for a given pair on a specified chain",
          "route": "/",
          "hasTests": true
        },
        "getAvailableFeedsForChain": {
          "requestMethod": "GET",
          "description": "Fetches the latest price for a given pair on a specified chain",
          "route": "/",
          "hasTests": true
        },
        "getLatestPriceEthereum": {
          "requestMethod": "GET",
          "description": "Fetches the latest price for a given pair on a specified chain",
          "route": "/",
          "hasTests": true
        },
        "getLatestPriceBinance": {
          "requestMethod": "GET",
          "description": "Fetches the latest price for a given pair on a specified chain",
          "route": "/",
          "hasTests": true
        },
        "getLatestPricePolygon": {
          "requestMethod": "GET",
          "description": "Fetches the latest price for a given pair on a specified chain",
          "route": "/",
          "hasTests": true
        },
        "getLatestPriceAvalanche": {
          "requestMethod": "GET",
          "description": "Fetches the latest price for a given pair on a specified chain",
          "route": "/",
          "hasTests": true
        },
        "getLatestPriceAribitrum": {
          "requestMethod": "GET",
          "description": "Fetches the latest price for a given pair on a specified chain",
          "route": "/",
          "hasTests": true
        },
        "getLatestPriceOptimism": {
          "requestMethod": "GET",
          "description": "Fetches the latest price for a given pair on a specified chain",
          "route": "/",
          "hasTests": true
        },
        "getLatestPriceBase": {
          "requestMethod": "GET",
          "description": "Fetches the latest price for a given pair on a specified chain",
          "route": "/",
          "hasTests": true
        },
        "getLatestPriceLinea": {
          "requestMethod": "GET",
          "description": "Fetches the latest price for a given pair on a specified chain",
          "route": "/",
          "hasTests": true
        },
        "getLatestPriceMantle": {
          "requestMethod": "GET",
          "description": "Fetches the latest price for a given pair on a specified chain",
          "route": "/",
          "hasTests": true
        },
        "getLatestPriceScroll": {
          "requestMethod": "GET",
          "description": "Fetches the latest price for a given pair on a specified chain",
          "route": "/",
          "hasTests": true
        },
        "getLatestPriceZksync": {
          "requestMethod": "GET",
          "description": "Fetches the latest price for a given pair on a specified chain",
          "route": "/",
          "hasTests": true
        },
        "getLatestPriceCelo": {
          "requestMethod": "GET",
          "description": "Fetches the latest price for a given pair on a specified chain",
          "route": "/",
          "hasTests": true
        }
      },
      "routeCount": 14
    },
    {
      "namespace": "chainlinkMulticall",
      "name": "Multicall Latest Prices",
      "description": "A short description of the schema purpose",
      "tags": [
        "oracle",
        "price",
        "feeds"
      ],
      "docs": [
        "https://docs.chain.link/data-feeds/price-feeds/addresses"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [
        "INFURA_API_KEY"
      ],
      "hasApiKey": true,
      "path": "chainlink/getLatestPricesMulticall.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/chainlink/getLatestPricesMulticall.mjs",
      "routes": {
        "getAvailableChains": {
          "requestMethod": "GET",
          "description": "Fetches the latest price for a given pair on a specified chain",
          "route": "/",
          "hasTests": true
        },
        "getAllLatestPricesEthereum": {
          "requestMethod": "GET",
          "description": "Fetches the latest price for a given pair on a specified chain",
          "route": "/",
          "hasTests": true
        },
        "getAllLatestPricesBinance": {
          "requestMethod": "GET",
          "description": "Fetches the latest price for a given pair on a specified chain",
          "route": "/",
          "hasTests": true
        },
        "getAllLatestPricesPolygon": {
          "requestMethod": "GET",
          "description": "Fetches the latest price for a given pair on a specified chain",
          "route": "/",
          "hasTests": true
        },
        "getAllLatestPricesAvalanche": {
          "requestMethod": "GET",
          "description": "Fetches the latest price for a given pair on a specified chain",
          "route": "/",
          "hasTests": true
        },
        "getAllLatestPricesAribitrum": {
          "requestMethod": "GET",
          "description": "Fetches the latest price for a given pair on a specified chain",
          "route": "/",
          "hasTests": true
        },
        "getAllLatestPricesOptimism": {
          "requestMethod": "GET",
          "description": "Fetches the latest price for a given pair on a specified chain",
          "route": "/",
          "hasTests": true
        },
        "getAllLatestPricesBase": {
          "requestMethod": "GET",
          "description": "Fetches the latest price for a given pair on a specified chain",
          "route": "/",
          "hasTests": true
        },
        "getAllLatestPricesLinea": {
          "requestMethod": "GET",
          "description": "Fetches the latest price for a given pair on a specified chain",
          "route": "/",
          "hasTests": true
        },
        "getAllLatestPricesMantle": {
          "requestMethod": "GET",
          "description": "Fetches the latest price for a given pair on a specified chain",
          "route": "/",
          "hasTests": true
        },
        "getAllLatestPricesScroll": {
          "requestMethod": "GET",
          "description": "Fetches the latest price for a given pair on a specified chain",
          "route": "/",
          "hasTests": true
        },
        "getAllLatestPricesZksync": {
          "requestMethod": "GET",
          "description": "Fetches the latest price for a given pair on a specified chain",
          "route": "/",
          "hasTests": true
        },
        "getAllLatestPricesCelo": {
          "requestMethod": "GET",
          "description": "Fetches the latest price for a given pair on a specified chain",
          "route": "/",
          "hasTests": true
        }
      },
      "routeCount": 13
    },
    {
      "namespace": "chainlist",
      "name": "Chainlist Tools",
      "description": "Query chain metadata (RPCs, explorers, currencies) from Chainlist static feed.",
      "tags": [
        "production",
        "blockchain",
        "rpc",
        "network"
      ],
      "docs": [
        "https://chainlist.org"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "chainlist/chainlist.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/chainlist/chainlist.mjs",
      "routes": {
        "getChainById": {
          "requestMethod": "GET",
          "description": "Returns detailed information for a chain given its numeric chainId.",
          "route": "/",
          "hasTests": true
        },
        "getChainsByKeyword": {
          "requestMethod": "GET",
          "description": "Returns all chains that match a keyword substring (case-insensitive).",
          "route": "/",
          "hasTests": true
        },
        "getExplorerURLs": {
          "requestMethod": "GET",
          "description": "Returns all block explorer URLs for a specific chain ID.",
          "route": "/",
          "hasTests": true
        },
        "getRPCEndpoints": {
          "requestMethod": "GET",
          "description": "Returns all HTTP RPC endpoints for a specific chain ID with speed testing. Filters out endpoints slower than 5 seconds and sorts by response time.",
          "route": "/",
          "hasTests": true
        },
        "getWebsocketEndpoints": {
          "requestMethod": "GET",
          "description": "Returns all WebSocket RPC endpoints for a specific chain ID with speed testing. Filters out endpoints slower than 5 seconds and sorts by response time.",
          "route": "/",
          "hasTests": true
        }
      },
      "routeCount": 5
    },
    {
      "namespace": "chartImg",
      "name": "Chart Image API",
      "description": "High-quality TradingView chart screenshots and financial chart image generation service",
      "tags": [
        "charts",
        "visualization",
        "trading"
      ],
      "docs": [
        "https://doc.chart-img.com"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [
        "CHART_IMG_API_KEY"
      ],
      "hasApiKey": true,
      "path": "chart-img-com/tradingview-charts.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/chart-img-com/tradingview-charts.mjs",
      "routes": {
        "getAdvancedChart": {
          "requestMethod": "POST",
          "description": "Capture a high-quality screenshot of a TradingView advanced chart with specified symbol and settings",
          "route": "/v2/tradingview/advanced-chart",
          "hasTests": true
        }
      },
      "routeCount": 1
    },
    {
      "namespace": "coincap",
      "name": "AssetsAPI",
      "description": "Retrieve data about crypto assets and markets",
      "tags": [],
      "docs": [
        "https://pro.coincap.io/api-docs"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [
        "COINCAP_API_KEY"
      ],
      "hasApiKey": true,
      "path": "coincap/assets.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/coincap/assets.mjs",
      "routes": {
        "listAssets": {
          "requestMethod": "GET",
          "description": "Retrieve a list of assets",
          "route": "/assets",
          "hasTests": true
        },
        "singleAsset": {
          "requestMethod": "GET",
          "description": "Retrieve details for a specific asset",
          "route": "/assets/:slug",
          "hasTests": true
        },
        "assetMarkets": {
          "requestMethod": "GET",
          "description": "Retrieve market data for an asset",
          "route": "/assets/:slug/markets",
          "hasTests": true
        },
        "assetHistory": {
          "requestMethod": "GET",
          "description": "Retrieve historical data for an asset",
          "route": "/assets/:slug/history",
          "hasTests": true
        }
      },
      "routeCount": 4
    },
    {
      "namespace": "coincap",
      "name": "CoinCapExchanges",
      "description": "Access exchange data from CoinCap including metadata and volume",
      "tags": [],
      "docs": [
        "https://pro.coincap.io/api-docs"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [
        "COINCAP_API_KEY"
      ],
      "hasApiKey": true,
      "path": "coincap/exchanges.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/coincap/exchanges.mjs",
      "routes": {
        "listExchanges": {
          "requestMethod": "GET",
          "description": "Retrieve a list of exchanges",
          "route": "/exchanges",
          "hasTests": true
        },
        "getExchangeById": {
          "requestMethod": "GET",
          "description": "Retrieve details for a specific exchange",
          "route": "/exchanges/:exchange",
          "hasTests": true
        }
      },
      "routeCount": 2
    },
    {
      "namespace": "coincap",
      "name": "CoinCapMarkets",
      "description": "Access CoinCap market data including price, volume, and exchange metadata",
      "tags": [],
      "docs": [
        "https://pro.coincap.io/api-docs"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [
        "COINCAP_API_KEY"
      ],
      "hasApiKey": true,
      "path": "coincap/markets.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/coincap/markets.mjs",
      "routes": {
        "listMarkets": {
          "requestMethod": "GET",
          "description": "Retrieve a list of markets with optional filters",
          "route": "/markets",
          "hasTests": true
        }
      },
      "routeCount": 1
    },
    {
      "namespace": "coincap",
      "name": "CoinCapRates",
      "description": "Access fiat and crypto conversion rates from CoinCap",
      "tags": [],
      "docs": [
        "https://pro.coincap.io/api-docs"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [
        "COINCAP_API_KEY"
      ],
      "hasApiKey": true,
      "path": "coincap/rates.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/coincap/rates.mjs",
      "routes": {
        "listRates": {
          "requestMethod": "GET",
          "description": "Retrieve all conversion rates or filter by comma-separated slugs",
          "route": "/rates",
          "hasTests": true
        },
        "getRateBySlug": {
          "requestMethod": "GET",
          "description": "Retrieve a specific conversion rate by slug",
          "route": "/rates/:slug",
          "hasTests": true
        }
      },
      "routeCount": 2
    },
    {
      "namespace": "coingecko",
      "name": "CoinGecko Stablecoins API",
      "description": "Access and analyze stablecoin data including market metrics, peg stability and historical trends via CoinGecko API",
      "tags": [
        "price",
        "market",
        "stablecoins"
      ],
      "docs": [
        "https://docs.coingecko.com/reference/simple-price",
        "https://docs.coingecko.com/reference/coins-id-market-chart"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "coingecko-com/coingecko-stablecoins.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/coingecko-com/coingecko-stablecoins.mjs",
      "routes": {
        "getSupportedStablecoins": {
          "requestMethod": "GET",
          "description": "Get list of all stablecoins from CoinGecko with market data.",
          "route": "/coins/markets",
          "hasTests": true
        },
        "getCurrentPrice": {
          "requestMethod": "GET",
          "description": "Fetches current prices for major stablecoins with peg stability analysis.",
          "route": "/simple/price",
          "hasTests": true
        },
        "getHistoricalData": {
          "requestMethod": "GET",
          "description": "Fetch historical market chart data for a specific stablecoin.",
          "route": "/coins/:id/market_chart",
          "hasTests": true
        },
        "analyzePegStability": {
          "requestMethod": "GET",
          "description": "Analyze peg stability for multiple stablecoins by comparing current prices to $1.00.",
          "route": "/simple/price",
          "hasTests": true
        }
      },
      "routeCount": 4
    },
    {
      "namespace": "coingecko",
      "name": "CoinGeckoCoins",
      "description": "Fetch coins list, markets, details, history, tickers, and token info from CoinGecko",
      "tags": [],
      "docs": [
        "https://docs.coingecko.com/reference/introduction"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "coingecko-com/coins.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/coingecko-com/coins.mjs",
      "routes": {
        "getCoinsList": {
          "requestMethod": "GET",
          "description": "Fetch the list of all coins (id, symbol, name)",
          "route": "/coins/list",
          "hasTests": true
        },
        "getCoinsMarkets": {
          "requestMethod": "GET",
          "description": "Fetch market data for coins",
          "route": "/coins/markets",
          "hasTests": true
        },
        "getCoinById": {
          "requestMethod": "GET",
          "description": "Fetch detailed info for a specific coin",
          "route": "/coins/:id",
          "hasTests": true
        },
        "getCoinMarketChart": {
          "requestMethod": "GET",
          "description": "Fetch historical market chart data for a coin",
          "route": "/coins/:id/market_chart",
          "hasTests": true
        },
        "getCoinHistory": {
          "requestMethod": "GET",
          "description": "Fetch historical coin data by date",
          "route": "/coins/:id/history",
          "hasTests": true
        },
        "getCoinTickers": {
          "requestMethod": "GET",
          "description": "Fetch all trading pairs (tickers) for a coin",
          "route": "/coins/:id/tickers",
          "hasTests": true
        },
        "getCoinContractInfo": {
          "requestMethod": "GET",
          "description": "Fetch coin information by contract address",
          "route": "/coins/:id/contract/:contract_address",
          "hasTests": true
        }
      },
      "routeCount": 7
    },
    {
      "namespace": "coingecko",
      "name": "CoinGeckoDerivatives",
      "description": "Retrieve derivatives markets and derivative exchanges from CoinGecko",
      "tags": [],
      "docs": [
        "https://docs.coingecko.com/reference/introduction"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "coingecko-com/derivatives.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/coingecko-com/derivatives.mjs",
      "routes": {
        "getDerivativeExchangeIds": {
          "requestMethod": "GET",
          "description": "Fetch the list of derivative exchanges",
          "route": "/derivatives/exchanges",
          "hasTests": true
        },
        "getDerivativeExchangesByIds": {
          "requestMethod": "GET",
          "description": "Fetch the list of derivative exchanges by IDs",
          "route": "/derivatives/exchanges/",
          "hasTests": true
        },
        "getDerivativeProductsByExchangeId": {
          "requestMethod": "GET",
          "description": "Fetch the list of derivative products by exchange ID",
          "route": "/derivatives/",
          "hasTests": true
        }
      },
      "routeCount": 3
    },
    {
      "namespace": "coingecko",
      "name": "CoinGeckoExchanges",
      "description": "Fetch exchanges list, exchange details, and exchange trading pairs from CoinGecko",
      "tags": [],
      "docs": [
        "https://docs.coingecko.com/reference/introduction"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "coingecko-com/exchanges.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/coingecko-com/exchanges.mjs",
      "routes": {
        "getExchangesList": {
          "requestMethod": "GET",
          "description": "Fetch the list of all supported exchanges",
          "route": "/exchanges/list",
          "hasTests": true
        },
        "getExchangeById": {
          "requestMethod": "GET",
          "description": "Fetch details of a specific exchange",
          "route": "/exchanges/:id",
          "hasTests": true
        },
        "getExchangeTickers": {
          "requestMethod": "GET",
          "description": "Fetch trading pairs (tickers) for a specific exchange",
          "route": "/exchanges/:id/tickers",
          "hasTests": true
        }
      },
      "routeCount": 3
    },
    {
      "namespace": "coingecko",
      "name": "CoinGeckoCategories",
      "description": "Retrieve coin categories and category names using CoinGecko public API",
      "tags": [],
      "docs": [
        "https://docs.coingecko.com/reference/introduction"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "coingecko-com/getCategories.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/coingecko-com/getCategories.mjs",
      "routes": {
        "getAvailableCoinCategoryIds": {
          "requestMethod": "GET",
          "description": "Fetch a short list of coin category names",
          "route": "/coins/categories/list",
          "hasTests": true
        },
        "getCoinCategoryDetailsByIds": {
          "requestMethod": "GET",
          "description": "Fetch the full list of coin categories including detailed metrics",
          "route": "/coins/categories",
          "hasTests": true
        }
      },
      "routeCount": 2
    },
    {
      "namespace": "coingecko",
      "name": "CoinGeckoGlobal",
      "description": "Fetch global and DeFi global market data from CoinGecko",
      "tags": [],
      "docs": [
        "https://docs.coingecko.com/reference/introduction"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "coingecko-com/global.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/coingecko-com/global.mjs",
      "routes": {
        "getGlobalData": {
          "requestMethod": "GET",
          "description": "Fetch overall global market data",
          "route": "/global",
          "hasTests": true
        },
        "getDeFiGlobalData": {
          "requestMethod": "GET",
          "description": "Fetch global DeFi market data",
          "route": "/global/decentralized_finance_defi",
          "hasTests": true
        }
      },
      "routeCount": 2
    },
    {
      "namespace": "coingecko",
      "name": "CoinGeckoSimplePrice",
      "description": "Fetch current prices for coins and tokens using CoinGecko's Simple API",
      "tags": [],
      "docs": [
        "https://docs.coingecko.com/reference/introduction"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "coingecko-com/simplePrice.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/coingecko-com/simplePrice.mjs",
      "routes": {
        "getSimplePrice": {
          "requestMethod": "GET",
          "description": "Fetch current price for one or more coins",
          "route": "/simple/price",
          "hasTests": true
        },
        "getTokenPrice": {
          "requestMethod": "GET",
          "description": "Fetch token price by contract address and chain",
          "route": "/simple/token_price/:id",
          "hasTests": true
        }
      },
      "routeCount": 2
    },
    {
      "namespace": "coingecko",
      "name": "CoinGeckoTrending",
      "description": "Retrieve trending coins, NFTs, and categories from CoinGecko trending search",
      "tags": [],
      "docs": [
        "https://docs.coingecko.com/reference/introduction"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "coingecko-com/trending.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/coingecko-com/trending.mjs",
      "routes": {
        "getTrendingCoins": {
          "requestMethod": "GET",
          "description": "Fetch trending coins from CoinGecko",
          "route": "/search/trending",
          "hasTests": true
        },
        "getTrendingNfts": {
          "requestMethod": "GET",
          "description": "Fetch trending NFTs from CoinGecko",
          "route": "/search/trending",
          "hasTests": true
        },
        "getTrendingCategories": {
          "requestMethod": "GET",
          "description": "Fetch trending categories from CoinGecko",
          "route": "/search/trending",
          "hasTests": true
        }
      },
      "routeCount": 3
    },
    {
      "namespace": "coinmarketcap",
      "name": "CoinMarketCap Categories",
      "description": "Retrieve information about cryptocurrency categories from CoinMarketCap.",
      "tags": [],
      "docs": [
        "https://coinmarketcap.com/api/documentation/v1/"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [
        "CMC_API_KEY"
      ],
      "hasApiKey": true,
      "path": "coinmarketcap-com/category.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/coinmarketcap-com/category.mjs",
      "routes": {
        "getCategories": {
          "requestMethod": "GET",
          "description": "Get a list of all cryptocurrency categories.",
          "route": "/v1/cryptocurrency/categories",
          "hasTests": true
        },
        "getCategory": {
          "requestMethod": "GET",
          "description": "Get information about a single cryptocurrency category.",
          "route": "/v1/cryptocurrency/category",
          "hasTests": true
        },
        "getIdMap": {
          "requestMethod": "GET",
          "description": "Get a mapping of all cryptocurrencies to unique CoinMarketCap IDs.",
          "route": "/v1/cryptocurrency/map",
          "hasTests": true
        },
        "getMetadataV2": {
          "requestMethod": "GET",
          "description": "Get static metadata for one or more cryptocurrencies including logo, description, website URLs, and social links.",
          "route": "/v2/cryptocurrency/info",
          "hasTests": true
        },
        "getQuotesLatestV2": {
          "requestMethod": "GET",
          "description": "Get the latest market quote for one or more cryptocurrencies, supporting multiple conversions.",
          "route": "/v2/cryptocurrency/quotes/latest",
          "hasTests": true
        }
      },
      "routeCount": 5
    },
    {
      "namespace": "coinmarketcap",
      "name": "CoinMarketCap100",
      "description": "Retrieve historical and latest CoinMarketCap 100 Index data.",
      "tags": [],
      "docs": [
        "https://coinmarketcap.com/api/documentation/v1/"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [
        "CMC_API_KEY"
      ],
      "hasApiKey": true,
      "path": "coinmarketcap-com/cmc-index.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/coinmarketcap-com/cmc-index.mjs",
      "routes": {
        "getHistorical": {
          "requestMethod": "GET",
          "description": "Fetch a historical range of CoinMarketCap 100 Index values.",
          "route": "/v3/index/cmc100-historical",
          "hasTests": true
        },
        "getLatest": {
          "requestMethod": "GET",
          "description": "Fetch the latest CoinMarketCap 100 Index value.",
          "route": "/v3/index/cmc100-latest",
          "hasTests": true
        }
      },
      "routeCount": 2
    },
    {
      "namespace": "coinmarketcap",
      "name": "CMCCryptoFearAndGreed",
      "description": "Retrieve historical and latest CMC Crypto Fear and Greed Index data.",
      "tags": [],
      "docs": [
        "https://coinmarketcap.com/api/documentation/v1/"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [
        "CMC_API_KEY"
      ],
      "hasApiKey": true,
      "path": "coinmarketcap-com/fear-and-greed.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/coinmarketcap-com/fear-and-greed.mjs",
      "routes": {
        "getFearAndGreedHistorical": {
          "requestMethod": "GET",
          "description": "Fetch historical CMC Crypto Fear and Greed values.",
          "route": "/v3/fear-and-greed/historical",
          "hasTests": true
        },
        "getFearAndGreedLatest": {
          "requestMethod": "GET",
          "description": "Fetch the latest CMC Crypto Fear and Greed value.",
          "route": "/v3/fear-and-greed/latest",
          "hasTests": true
        }
      },
      "routeCount": 2
    },
    {
      "namespace": "coinmarketcap",
      "name": "CoinMarketCapListingsLatest",
      "description": "Returns a paginated list of all active cryptocurrencies with latest market data.",
      "tags": [],
      "docs": [
        "https://coinmarketcap.com/api/documentation/v1/"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [
        "CMC_API_KEY"
      ],
      "hasApiKey": true,
      "path": "coinmarketcap-com/listings.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/coinmarketcap-com/listings.mjs",
      "routes": {
        "listingsLatest": {
          "requestMethod": "GET",
          "description": "Get latest listings of cryptocurrencies sorted and paginated.",
          "route": "/cryptocurrency/listings/latest",
          "hasTests": true
        }
      },
      "routeCount": 1
    },
    {
      "namespace": "cointelegraph",
      "name": "CointelegraphRSS",
      "description": "Fetch latest Cointelegraph news filtered by category and time range.",
      "tags": [],
      "docs": [
        "https://cointelegraph.com/rss-feeds"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "cointelegraph/getLatestNews.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/cointelegraph/getLatestNews.mjs",
      "routes": {
        "getLatestNews": {
          "requestMethod": "GET",
          "description": "Get the latest news articles from Cointelegraph RSS feeds by category and time range.",
          "route": "/rss",
          "hasTests": true
        }
      },
      "routeCount": 1
    },
    {
      "namespace": "context7",
      "name": "Context7 Library Docs",
      "description": "Accesses searchable documentation and examples for programming libraries using Context7.",
      "tags": [],
      "docs": [
        "https://context7.com/docs"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "context-7/getDocumentation.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/context-7/getDocumentation.mjs",
      "routes": {
        "searchLibraryId": {
          "requestMethod": "GET",
          "description": "Resolves a library name into a Context7-compatible library ID and returns top matches.",
          "route": "/v1/search",
          "hasTests": true
        },
        "getLibraryDocs": {
          "requestMethod": "GET",
          "description": "Fetches documentation for a specific library using its Context7-compatible library ID.",
          "route": "/v1/{{libraryId}}",
          "hasTests": true
        }
      },
      "routeCount": 2
    },
    {
      "namespace": "cryptodata",
      "name": "Get Coins",
      "description": "Retrieve comprehensive data about all cryptocurrencies including prices, market cap, volume, price changes, supply info, trading metrics, and metadata.",
      "tags": [
        "production",
        "price",
        "market",
        "data"
      ],
      "docs": [
        "https://your.api.documentation/coins"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [
        "COINSTATS_API_KEY"
      ],
      "hasApiKey": true,
      "path": "coinstats/mixed.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/coinstats/mixed.mjs",
      "routes": {
        "getCoins": {
          "requestMethod": "GET",
          "description": "Get comprehensive data about all cryptocurrencies: Price, market cap, and volume. Price changes (1h, 24h, 7d). Supply information. Trading metrics. Social links and metadata.",
          "route": "/coins",
          "hasTests": true
        },
        "getCoinById": {
          "requestMethod": "GET",
          "description": "Get detailed information about a specific cryptocurrency based on its unique identifier.",
          "route": "/coins/:coinId",
          "hasTests": true
        },
        "getCoinChartById": {
          "requestMethod": "GET",
          "description": "Get chart data for a specific cryptocurrency based on its unique identifier, specifying different time ranges.",
          "route": "/coins/:coinId/charts",
          "hasTests": true
        },
        "getCoinAvgPrice": {
          "requestMethod": "GET",
          "description": "Get the historical average price for a specific cryptocurrency based on its unique identifier and a specific date.",
          "route": "/coins/price/avg",
          "hasTests": true
        },
        "getCoinExchangePrice": {
          "requestMethod": "GET",
          "description": "Get the historical price data for a specific cryptocurrency on a particular exchange.",
          "route": "/coins/price/exchange",
          "hasTests": true
        },
        "getTickerExchanges": {
          "requestMethod": "GET",
          "description": "Get a list of supported exchanges.",
          "route": "/tickers/exchanges",
          "hasTests": true
        },
        "getTickerMarkets": {
          "requestMethod": "GET",
          "description": "Get a list of tickers for a specific cryptocurrency across different exchanges.",
          "route": "/tickers/markets",
          "hasTests": true
        },
        "getBlockchains": {
          "requestMethod": "GET",
          "description": "Get a list of supported blockchains by CoinStats.",
          "route": "/wallet/blockchains",
          "hasTests": true
        },
        "getWalletBalance": {
          "requestMethod": "GET",
          "description": "Get the balance data for a provided wallet address on a specific blockchain network.",
          "route": "/wallet/balance",
          "hasTests": true
        },
        "getWalletBalances": {
          "requestMethod": "GET",
          "description": "Get the balance data for a provided wallet address on all CoinStats supported networks.",
          "route": "/wallet/balances",
          "hasTests": true
        },
        "getExchanges": {
          "requestMethod": "GET",
          "description": "Get a list of supported exchange portfolio connections by CoinStats.",
          "route": "/exchange/support",
          "hasTests": true
        },
        "getFiatCurrencies": {
          "requestMethod": "GET",
          "description": "Get a list of fiat currencies supported by CoinStats.",
          "route": "/fiats",
          "hasTests": true
        },
        "getNewsSources": {
          "requestMethod": "GET",
          "description": "Get news sources.",
          "route": "/news/sources",
          "hasTests": true
        },
        "getNews": {
          "requestMethod": "GET",
          "description": "Get news articles with pagination.",
          "route": "/news",
          "hasTests": true
        },
        "getNewsByType": {
          "requestMethod": "GET",
          "description": "Get news articles based on a type.",
          "route": "/news/type/:type",
          "hasTests": true
        },
        "getNewsById": {
          "requestMethod": "GET",
          "description": "Get news by id.",
          "route": "/news/:id",
          "hasTests": true
        },
        "getMarketCap": {
          "requestMethod": "GET",
          "description": "Get global market data.",
          "route": "/markets",
          "hasTests": true
        },
        "getCurrencies": {
          "requestMethod": "GET",
          "description": "Get a list of fiat currencies supported by CoinStats.",
          "route": "/currencies",
          "hasTests": true
        }
      },
      "routeCount": 18
    },
    {
      "namespace": "cryptoOrderbook",
      "name": "Crypto Order Book Metrics",
      "description": "Fetches and compares bid/ask depth and imbalance for trading pairs across supported exchanges using CCXT.",
      "tags": [
        "production",
        "trading",
        "orderbook",
        "exchange"
      ],
      "docs": [
        "https://github.com/ccxt/ccxt"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "ccxt/orderbook.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/ccxt/orderbook.mjs",
      "routes": {
        "calculateOrderbook": {
          "requestMethod": "POST",
          "description": "Calculate bid/ask depth, imbalance and mid-price for a given trading pair on one exchange.",
          "route": "/calculate",
          "hasTests": true
        },
        "compareOrderbook": {
          "requestMethod": "POST",
          "description": "Compare order book depth and imbalance for a trading pair across multiple exchanges.",
          "route": "/compare",
          "hasTests": true
        }
      },
      "routeCount": 2
    },
    {
      "namespace": "cryptopanic",
      "name": "CryptoPanic",
      "description": "Fetches cryptocurrency news headlines from CryptoPanic across different content types.",
      "tags": [],
      "docs": [
        "https://cryptopanic.com/developers/api/"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [
        "CRYPTOPANIC_API_KEY"
      ],
      "hasApiKey": true,
      "path": "cryptopanic/getNews.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/cryptopanic/getNews.mjs",
      "routes": {
        "getCryptoCryptopanicNews": {
          "requestMethod": "GET",
          "description": "Get a list of crypto news headlines from CryptoPanic.",
          "route": "/",
          "hasTests": true
        }
      },
      "routeCount": 1
    },
    {
      "namespace": "cryptowizards",
      "name": "CryptoWizards Analytics API",
      "description": "Statistical finance endpoints for backtesting, correlation, cointegration, and copula analysis using real market data.",
      "tags": [
        "production",
        "analytics",
        "trading",
        "backtest"
      ],
      "docs": [
        "https://api.cryptowizards.net",
        "https://github.com/cryptowizards"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [
        "CRYPTOWIZARDS_API_KEY"
      ],
      "hasApiKey": true,
      "path": "cryptowizards-net/analytics.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/cryptowizards-net/analytics.mjs",
      "routes": {
        "runBacktest": {
          "requestMethod": "GET",
          "description": "Runs a backtest using real market data from exchanges with comprehensive trading metrics.",
          "route": "/v1beta/backtest",
          "hasTests": true
        },
        "checkCointegration": {
          "requestMethod": "GET",
          "description": "Performs Engle-Granger cointegration test using real market data from exchanges.",
          "route": "/v1beta/cointegration",
          "hasTests": true
        },
        "getCorrelations": {
          "requestMethod": "GET",
          "description": "Computes Pearson, Spearman and Kendall correlations using real market data from exchanges.",
          "route": "/v1beta/correlations",
          "hasTests": true
        },
        "analyzeCopula": {
          "requestMethod": "GET",
          "description": "Computes copula-based dependency modeling using real market data from exchanges.",
          "route": "/v1beta/copula",
          "hasTests": true
        },
        "analyzeSpread": {
          "requestMethod": "GET",
          "description": "Calculates spread metrics using real market data with Dynamic, OU, or Static methods.",
          "route": "/v1beta/spread",
          "hasTests": true
        },
        "analyzeZScores": {
          "requestMethod": "GET",
          "description": "Computes rolling z-scores using real market data to identify trading opportunities.",
          "route": "/v1beta/zscores",
          "hasTests": true
        }
      },
      "routeCount": 6
    },
    {
      "namespace": "defillama",
      "name": "DeFi Llama MCP",
      "description": "Provides access to DeFi protocol and liquidity data from DeFi Llama",
      "tags": [],
      "docs": [
        "https://docs.llama.fi"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "defilama/api.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/defilama/api.mjs",
      "routes": {
        "getProtocols": {
          "requestMethod": "GET",
          "description": "Retrieve a list of all DeFi protocols from DeFi Llama (first 20)",
          "route": "/protocols",
          "hasTests": true
        },
        "getProtocolTvl": {
          "requestMethod": "GET",
          "description": "Get TVL data for a specific DeFi protocol",
          "route": "/protocol/:protocol",
          "hasTests": true
        },
        "getChainTvl": {
          "requestMethod": "GET",
          "description": "Retrieve historical TVL data for a specific blockchain",
          "route": "/v2/historicalChainTvl/:chain",
          "hasTests": true
        }
      },
      "routeCount": 3
    },
    {
      "namespace": "defillama",
      "name": "DeFi Llama Token Prices",
      "description": "Provides current token price data using DeFi Llama",
      "tags": [],
      "docs": [
        "https://docs.llama.fi"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "defilama/coins.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/defilama/coins.mjs",
      "routes": {
        "getTokenPrices": {
          "requestMethod": "GET",
          "description": "Get current price information for a specific token",
          "route": "/prices/current/_tokenName_",
          "hasTests": true
        }
      },
      "routeCount": 1
    },
    {
      "namespace": "defillama",
      "name": "DeFi Llama Liquidity Pools",
      "description": "Provides access to current DeFi Llama liquidity pool data and TVL charts",
      "tags": [],
      "docs": [
        "https://docs.llama.fi"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "defilama/yields.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/defilama/yields.mjs",
      "routes": {
        "getPools": {
          "requestMethod": "GET",
          "description": "Retrieve a list of all liquidity pools from DeFi Llama (first 30)",
          "route": "/pools",
          "hasTests": true
        },
        "getPoolTvl": {
          "requestMethod": "GET",
          "description": "Get detailed information about a specific liquidity pool by its ID",
          "route": "/chart/{{pool}}",
          "hasTests": true
        }
      },
      "routeCount": 2
    },
    {
      "namespace": "dexscreener",
      "name": "dexscreener-boosted",
      "description": "DexScreener API – Boosted token insights",
      "tags": [],
      "docs": [
        "https://docs.dexscreener.com/api/reference"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "dexscreener-com/boosted.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/dexscreener-com/boosted.mjs",
      "routes": {
        "getLatestBoostedTokens": {
          "requestMethod": "GET",
          "description": "Get the latest boosted tokens",
          "route": "/token-boosts/latest/v1",
          "hasTests": true
        },
        "getMostActiveBoostedTokens": {
          "requestMethod": "GET",
          "description": "Get tokens with most active boosts",
          "route": "/token-boosts/top/v1",
          "hasTests": true
        }
      },
      "routeCount": 2
    },
    {
      "namespace": "dexscreener",
      "name": "Dexscreener Pairs",
      "description": "DexScreener API – Pair data and token orders by chain",
      "tags": [],
      "docs": [
        "https://docs.dexscreener.com/api/reference"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "dexscreener-com/pairs.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/dexscreener-com/pairs.mjs",
      "routes": {
        "getPairByChainAndAddress": {
          "requestMethod": "GET",
          "description": "Get pair by chain and pair address",
          "route": "/latest/dex/pairs/:chainId/:pairAddress",
          "hasTests": true
        },
        "checkTokenOrders": {
          "requestMethod": "GET",
          "description": "Check token orders by chain and token address",
          "route": "/orders/v1/:chainId/:tokenAddress",
          "hasTests": true
        }
      },
      "routeCount": 2
    },
    {
      "namespace": "dexscreener",
      "name": "dexscreener-tokeninfo",
      "description": "DexScreener API – Token search and profile data",
      "tags": [],
      "docs": [
        "https://docs.dexscreener.com/api/reference"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "dexscreener-com/tokenInfo.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/dexscreener-com/tokenInfo.mjs",
      "routes": {
        "getLatestTokenProfiles": {
          "requestMethod": "GET",
          "description": "Get the latest token profiles",
          "route": "/token-profiles/latest/v1",
          "hasTests": true
        },
        "searchPairs": {
          "requestMethod": "GET",
          "description": "Search pairs by query string",
          "route": "/latest/dex/search",
          "hasTests": true
        },
        "getPairsByToken": {
          "requestMethod": "GET",
          "description": "Get pairs by token address",
          "route": "/tokens/v1/:chainId/:tokenAddress",
          "hasTests": true
        },
        "getTokenPools": {
          "requestMethod": "GET",
          "description": "Get token pools by chain and address",
          "route": "/token-pairs/v1/:chainId/:tokenAddress",
          "hasTests": true
        }
      },
      "routeCount": 4
    },
    {
      "namespace": "dexscreener",
      "name": "DexScreener Token Pairs API",
      "description": "Access token pair data, price information, and trading metrics from DexScreener across multiple DEX platforms",
      "tags": [
        "dex",
        "trading",
        "pairs"
      ],
      "docs": [
        "https://docs.dexscreener.com/api/reference"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "dexscreener-com/tokenpairs.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/dexscreener-com/tokenpairs.mjs",
      "routes": {
        "getTokenPairs": {
          "requestMethod": "GET",
          "description": "Get token pairs by token address on specific blockchain",
          "route": "/latest/dex/tokens/:tokenAddress",
          "hasTests": true
        },
        "searchPairs": {
          "requestMethod": "GET",
          "description": "Search for token pairs by query string (token name, symbol, or address)",
          "route": "/latest/dex/search",
          "hasTests": true
        },
        "getLatestPairs": {
          "requestMethod": "GET",
          "description": "Get specific token pair by chain and pair address",
          "route": "/latest/dex/pairs/:chainId/:pairId",
          "hasTests": true
        },
        "getPairsByChain": {
          "requestMethod": "GET",
          "description": "Get trending token pairs by chain",
          "route": "/orders/v1/:chainId/:sortBy",
          "hasTests": true
        },
        "getSpecificPair": {
          "requestMethod": "GET",
          "description": "Get detailed information about a specific token pair by chain and address",
          "route": "/latest/dex/pairs/:chainId/:pairAddress",
          "hasTests": true
        }
      },
      "routeCount": 5
    },
    {
      "namespace": "duneAnalytics",
      "name": "FarcasterTrends",
      "description": "Fetches trending memecoins, channels, and users from Farcaster via Dune Analytics.",
      "tags": [],
      "docs": [
        "https://docs.dune.com/api-reference/overview/introduction"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [
        "DUNE_API_KEY"
      ],
      "hasApiKey": true,
      "path": "dune-analytics/farcaster.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/dune-analytics/farcaster.mjs",
      "routes": {
        "farcasterGetTrendingMemecoins": {
          "requestMethod": "GET",
          "description": "Get trending Farcaster memecoins from Dune Analytics.",
          "route": "/memecoins",
          "hasTests": true
        },
        "farcasterGetTrendingChannels": {
          "requestMethod": "GET",
          "description": "Get trending Farcaster channels from Dune Analytics.",
          "route": "/channels",
          "hasTests": true
        },
        "farcasterGetTrendingUsers": {
          "requestMethod": "GET",
          "description": "Get trending Farcaster users who casted in the last 14 days.",
          "route": "/users",
          "hasTests": true
        }
      },
      "routeCount": 3
    },
    {
      "namespace": "duneAnalytics",
      "name": "DuneAnalytics",
      "description": "Interface with Dune Analytics to execute and retrieve query results.",
      "tags": [],
      "docs": [
        "https://docs.dune.com/api-reference/overview/introduction"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [
        "DUNE_API_KEY"
      ],
      "hasApiKey": true,
      "path": "dune-analytics/getResults.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/dune-analytics/getResults.mjs",
      "routes": {
        "getLatestResult": {
          "requestMethod": "GET",
          "description": "Fetch latest result for a Dune query ID (returns CSV string).",
          "route": "/query/:query_id/results",
          "hasTests": true
        }
      },
      "routeCount": 1
    },
    {
      "namespace": "duneAnalytics",
      "name": "DexAndContracts",
      "description": "Provides insights into DEX trading pairs, trending contracts, and market share across chains via Dune Analytics.",
      "tags": [],
      "docs": [
        "https://docs.dune.com/api-reference/overview/introduction"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [
        "DUNE_API_KEY"
      ],
      "hasApiKey": true,
      "path": "dune-analytics/trendingContracts.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/dune-analytics/trendingContracts.mjs",
      "routes": {
        "getDexPairStats": {
          "requestMethod": "GET",
          "description": "Get DEX pair statistics for a given blockchain.",
          "route": "/dex/pairs/:chain",
          "hasTests": true
        },
        "getTrendingContracts": {
          "requestMethod": "GET",
          "description": "Get trending contracts deployed on EVM chains based on the last 30 days.",
          "route": "/trends/evm/contracts/:chain",
          "hasTests": true
        },
        "getMarketShare": {
          "requestMethod": "GET",
          "description": "Get DEX or NFT market share on a specific chain.",
          "route": "/marketshare/:market/:chain",
          "hasTests": true
        }
      },
      "routeCount": 3
    },
    {
      "namespace": "ens",
      "name": "ENS & EVM Name Resolution",
      "description": "Resolve ENS (and some EVM name services supported by ethers.js) to addresses and perform reverse lookups from addresses to ENS names.",
      "tags": [
        "production",
        "domain",
        "identity",
        "ethereum"
      ],
      "docs": [
        "https://docs.ethers.org/v6/api/providers/#Provider-resolveName",
        "https://docs.ethers.org/v6/api/providers/#Provider-lookupAddress",
        "https://docs.ens.domains/"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [
        "INFURA_API_KEY"
      ],
      "hasApiKey": true,
      "path": "ens/ens-resolution.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/ens/ens-resolution.mjs",
      "routes": {
        "resolveName": {
          "requestMethod": "GET",
          "description": "Resolves a human-readable name (e.g., vitalik.eth) to a checksummed address on the selected chain.",
          "route": "/",
          "hasTests": true
        },
        "lookupAddress": {
          "requestMethod": "GET",
          "description": "Looks up the primary ENS name for a given address (reverse record) on the selected chain.",
          "route": "/",
          "hasTests": true
        },
        "supportMatrix": {
          "requestMethod": "GET",
          "description": "Returns the supported networks for ENS resolution and whether SEI is supported.",
          "route": "/support",
          "hasTests": true
        }
      },
      "routeCount": 3
    },
    {
      "namespace": "epo",
      "name": "European Patent Office RSS Search",
      "description": "Search European patents via RSS feeds from the European Patent Office register",
      "tags": [
        "patents",
        "research",
        "search"
      ],
      "docs": [
        "https://register.epo.org/",
        "https://www.epo.org/searching-for-patents/"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "epo-org/patent-search.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/epo-org/patent-search.mjs",
      "routes": {
        "searchPatents": {
          "requestMethod": "GET",
          "description": "Search for patents using custom query and language",
          "route": "/rssSearch",
          "hasTests": true
        },
        "searchByTechnology": {
          "requestMethod": "GET",
          "description": "Search patents by predefined technology areas",
          "route": "/rssSearch",
          "hasTests": true
        },
        "searchByKeywords": {
          "requestMethod": "GET",
          "description": "Search patents using multiple keywords with AND/OR operators",
          "route": "/rssSearch",
          "hasTests": true
        },
        "searchByDate": {
          "requestMethod": "GET",
          "description": "Search patents within specific date ranges",
          "route": "/rssSearch",
          "hasTests": true
        }
      },
      "routeCount": 4
    },
    {
      "namespace": "etherscan",
      "name": "Etherscan",
      "description": "Etherscan API",
      "tags": [],
      "docs": [
        "https://docs.etherscan.io"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [
        "ETHERSCAN_API_KEY"
      ],
      "hasApiKey": true,
      "path": "etherscan/getContractEthereum.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/etherscan/getContractEthereum.mjs",
      "routes": {
        "getContractABI": {
          "requestMethod": "GET",
          "description": "Returns the Contract ABI of a verified smart contract.",
          "route": "/api",
          "hasTests": true
        },
        "getContractSourceCode": {
          "requestMethod": "GET",
          "description": "Returns the Solidity source code of a verified smart contract.",
          "route": "/api",
          "hasTests": true
        }
      },
      "routeCount": 2
    },
    {
      "namespace": "etherscan",
      "name": "SmartContractExplorer",
      "description": "Provides available chains and fetches smart contract source code",
      "tags": [],
      "docs": [
        "https://docs.etherscan.io"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [
        "ETHERSCAN_API_KEY"
      ],
      "hasApiKey": true,
      "path": "etherscan/getContractMultichain.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/etherscan/getContractMultichain.mjs",
      "routes": {
        "getAvailableChains": {
          "requestMethod": "GET",
          "description": "List available blockchain aliases",
          "route": "/chains",
          "hasTests": true
        },
        "getSmartContractAbi": {
          "requestMethod": "GET",
          "description": "Fetch smart contract source code by alias",
          "route": "/",
          "hasTests": true
        },
        "getSourceCode": {
          "requestMethod": "GET",
          "description": "Fetch smart contract source code by alias",
          "route": "/",
          "hasTests": true
        }
      },
      "routeCount": 3
    },
    {
      "namespace": "etherscan",
      "name": "SmartContractExplorer",
      "description": "Provides available chains and fetches smart contract source code",
      "tags": [],
      "docs": [
        "https://docs.etherscan.io"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [
        "ETHERSCAN_API_KEY"
      ],
      "hasApiKey": true,
      "path": "etherscan/getGaspriceMultichain.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/etherscan/getGaspriceMultichain.mjs",
      "routes": {
        "getGasOracle": {
          "requestMethod": "GET",
          "description": "Fetch current gas oracle data for a given chain",
          "route": "/",
          "hasTests": true
        },
        "estimateGasCost": {
          "requestMethod": "GET",
          "description": "Estimate gas cost using a specific gas price for a given chain",
          "route": "/",
          "hasTests": true
        }
      },
      "routeCount": 2
    },
    {
      "namespace": "ethscriptions",
      "name": "Ethscriptions API V2",
      "description": "Access the Ethscriptions protocol - Ethereum-based digital artifacts and tokens",
      "tags": [
        "nft",
        "ethereum",
        "inscriptions"
      ],
      "docs": [
        "https://api.ethscriptions.com/v2",
        "https://github.com/0xFacet/ethscriptions-indexer"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "ethscriptions-com/ethscriptions-api.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/ethscriptions-com/ethscriptions-api.mjs",
      "routes": {
        "listEthscriptions": {
          "requestMethod": "GET",
          "description": "Retrieve a list of ethscriptions with various filtering options",
          "route": "/ethscriptions",
          "hasTests": true
        },
        "getEthscription": {
          "requestMethod": "GET",
          "description": "Get detailed information about a specific ethscription by transaction hash or number",
          "route": "/ethscriptions/:id",
          "hasTests": true
        },
        "getEthscriptionData": {
          "requestMethod": "GET",
          "description": "Retrieve the raw content data of an ethscription",
          "route": "/ethscriptions/:id/data",
          "hasTests": true
        },
        "getEthscriptionAttachment": {
          "requestMethod": "GET",
          "description": "Retrieve the raw attachment data of an ethscription",
          "route": "/ethscriptions/:id/attachment",
          "hasTests": true
        },
        "checkEthscriptionExists": {
          "requestMethod": "GET",
          "description": "Check if an ethscription exists by its content SHA hash",
          "route": "/ethscriptions/exists/:sha",
          "hasTests": true
        },
        "checkMultipleEthscriptionsExistence": {
          "requestMethod": "POST",
          "description": "Check existence of multiple ethscriptions by SHA hashes (max 100)",
          "route": "/ethscriptions/exists_multi",
          "hasTests": true
        },
        "listTransfers": {
          "requestMethod": "GET",
          "description": "List ethscription transfers with filtering options",
          "route": "/ethscription_transfers",
          "hasTests": true
        },
        "listTokens": {
          "requestMethod": "GET",
          "description": "List ethscription tokens with filtering options",
          "route": "/tokens",
          "hasTests": true
        },
        "getTokenDetails": {
          "requestMethod": "GET",
          "description": "Get detailed information about a specific token including balances",
          "route": "/tokens/:protocol/:tick",
          "hasTests": true
        },
        "getTokenHistoricalState": {
          "requestMethod": "GET",
          "description": "Get historical state of a token at a specific block number",
          "route": "/tokens/:protocol/:tick/historical_state",
          "hasTests": true
        },
        "getIndexerStatus": {
          "requestMethod": "GET",
          "description": "Get current status of the ethscriptions indexer",
          "route": "/status",
          "hasTests": true
        }
      },
      "routeCount": 11
    },
    {
      "namespace": "goldskyLilNouns",
      "name": "Lil Nouns Subgraph",
      "description": "Fetches proposal data from the Lil Nouns subgraph hosted on Goldsky.",
      "tags": [
        "production",
        "data",
        "api"
      ],
      "docs": [
        "https://lilnouns.wtf",
        "https://docs.goldsky.com"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "goldsky-nouns/lil-nouns.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/goldsky-nouns/lil-nouns.mjs",
      "routes": {
        "getProposals": {
          "requestMethod": "POST",
          "description": "Retrieves the first 1000 proposals ordered by createdBlock in ascending order.",
          "route": "/",
          "hasTests": true
        },
        "getProposalById": {
          "requestMethod": "POST",
          "description": "Fetch a single proposal by its numeric ID.",
          "route": "/",
          "hasTests": true
        }
      },
      "routeCount": 2
    },
    {
      "namespace": "goldskyNouns",
      "name": "Nouns DAO Subgraph",
      "description": "Access various views into Nouns DAO data from the Goldsky-hosted subgraph.",
      "tags": [
        "production",
        "dao",
        "governance",
        "nft"
      ],
      "docs": [
        "https://docs.goldsky.com",
        "https://nouns.wtf"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "goldsky-nouns/goldsky-nouns.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/goldsky-nouns/goldsky-nouns.mjs",
      "routes": {
        "getRecentProposals": {
          "requestMethod": "POST",
          "description": "Retrieve recent proposals with detailed voting information.",
          "route": "/",
          "hasTests": true
        },
        "getCurrentAuctions": {
          "requestMethod": "POST",
          "description": "Get current and recent auction data with bid information.",
          "route": "/",
          "hasTests": true
        },
        "getNounDetails": {
          "requestMethod": "POST",
          "description": "Get detailed Noun information including traits, owner, and voting history.",
          "route": "/",
          "hasTests": true
        },
        "getTopDelegates": {
          "requestMethod": "POST",
          "description": "Get delegates with the highest voting power in the Nouns DAO.",
          "route": "/",
          "hasTests": true
        }
      },
      "routeCount": 4
    },
    {
      "namespace": "goldskyNouns",
      "name": "Nouns DAO Subgraph",
      "description": "Access various views into Nouns DAO data from the Goldsky-hosted subgraph.",
      "tags": [
        "production",
        "dao",
        "governance",
        "nft"
      ],
      "docs": [
        "https://docs.goldsky.com",
        "https://nouns.wtf"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "goldsky-nouns/nouns.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/goldsky-nouns/nouns.mjs",
      "routes": {
        "getCandidateProposals": {
          "requestMethod": "POST",
          "description": "Retrieve up to 1000 candidate proposals from the subgraph.",
          "route": "/",
          "hasTests": true
        },
        "getActivePendingUpdatableProposers": {
          "requestMethod": "POST",
          "description": "Get proposers with ACTIVE or PENDING proposals where endBlock is still in the future.",
          "route": "/",
          "hasTests": true
        },
        "getLatestAuctions": {
          "requestMethod": "POST",
          "description": "Fetch up to 1000 latest auctions and their bid data.",
          "route": "/",
          "hasTests": true
        }
      },
      "routeCount": 3
    },
    {
      "namespace": "honeypot",
      "name": "Honeypot Detector",
      "description": "Checks if a token contract is a honeypot using honeypot.is API.",
      "tags": [
        "production",
        "security",
        "token",
        "validation"
      ],
      "docs": [
        "https://honeypot.is"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "honeypot/honeypot.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/honeypot/honeypot.mjs",
      "routes": {
        "check": {
          "requestMethod": "GET",
          "description": "Checks if a token address is a honeypot on Ethereum, BSC, or Base.",
          "route": "/IsHoneypot",
          "hasTests": true
        }
      },
      "routeCount": 1
    },
    {
      "namespace": "indicatorts",
      "name": "OHLCV Indicators",
      "description": "indicators",
      "tags": [],
      "docs": [
        "https://github.com/cinar/indicatorts"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "indicators/indicatorts-schema.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/indicators/indicatorts-schema.mjs",
      "routes": {
        "getAbsolutePriceOscillator": {
          "requestMethod": "GET",
          "description": "Absolute Price Oscillator (APO): The absolutePriceOscillator function calculates a technical indicator that is used to follow trends. APO crossing above zero indicates bullish, while crossing below zero indicates bearish. Positive value is upward trend, while negative value is downward trend. Technical Description: Fast = Ema(fastPeriod, values); Slow = Ema(slowPeriod, values); APO = Fast - Slow",
          "route": "/",
          "hasTests": true
        },
        "getAbsolutePriceOscillatorStrategy": {
          "requestMethod": "GET",
          "description": "Absolute Price Oscillator Strategy: The absolutePriceOscillatorStrategy uses the values that are generated by the Absolute Price Oscillator (APO) indicator to provide a BUY action when the AO is greather than zero, and SELL action when AO is less than zero, otherwise HOLD action. Technical Description: null",
          "route": "/",
          "hasTests": true
        },
        "getAccelerationBands": {
          "requestMethod": "GET",
          "description": "Acceleration Bands (AB): The accelerationBands plots upper and lower envelope bands around a simple moving average. Technical Description: Upper Band = SMA(High * (1 + 4 * (High - Low) / (High + Low))); Middle Band = SMA(Closing); Lower Band = SMA(Low * (1 + 4 * (High - Low) / (High + Low)))",
          "route": "/",
          "hasTests": true
        },
        "getAccelerationBandsStrategy": {
          "requestMethod": "GET",
          "description": "Acceleration Bands Strategy: The accelerationBandsStrategy uses the upperBand, and lowerBand values that are generated by the Acceleration Bands indicator function to provide a BUY action when closing is greather than or equals to upperBand, a SELL action otherwise. Technical Description: null",
          "route": "/",
          "hasTests": true
        },
        "getAccumulationDistribution": {
          "requestMethod": "GET",
          "description": "Accumulation/Distribution (A/D): The accumulationDistribution is a cumulative indicator that uses volume and price to assess whether a stock is being accumulated or distributed. The Accumulation/Distribution seeks to identify divergences between the stock price and the volume flow. Technical Description: MFM = ((Closing - Low) - (High - Closing)) / (High - Low); MFV = MFM * Period Volume; AD = Previous AD + CMFV",
          "route": "/",
          "hasTests": true
        },
        "getAroon": {
          "requestMethod": "GET",
          "description": "Aroon: The Aroon function calculates a technical indicator that is used to identify trend changes in the price of a stock, as well as the strength of that trend. It consists of two lines, Aroon Up, and Aroon Down. The Aroon Up line measures measures the strength of the uptrend, and the Aroon Down measures the strength of the downtrend. When Aroon Up is above Aroon Down, it indicates bullish price, and when Aroon Down is above Aroon Up, it indicates bearish price. Technical Description: Aroon Up = ((25 - Period Since Last 25 Period High) / 25) * 100; Aroon Down = ((25 - Period Since Last 25 Period Low) / 25) * 100",
          "route": "/",
          "hasTests": true
        },
        "getAroonStrategy": {
          "requestMethod": "GET",
          "description": "Aroon Strategy: The aroonStrategy uses the values that are generated by the Aroon Indicator to provide a BUY action when the up is greather than down, and SELL action when up is less than down, otherwise HOLD action. Technical Description: null",
          "route": "/",
          "hasTests": true
        },
        "getAverageTrueRange": {
          "requestMethod": "GET",
          "description": "Average True Range (ATR): The atr function calculates a technical analysis indicator that measures market volatility by decomposing the entire range of stock prices for that period. Technical Description: TR = Max((High - Low), (High - Closing), (Closing - Low)); ATR = 14-Period SMA TR",
          "route": "/",
          "hasTests": true
        },
        "getAwesomeOscillator": {
          "requestMethod": "GET",
          "description": "Awesome Oscillator (AO): The awesomeOscillator function calculates the awesome oscillator based on low and high daily prices for a given stock. It is an indicator used to measure market momentum. Technical Description: Median Price = ((Low + High) / 2); AO = 5-Period SMA - 34-Period SMA.",
          "route": "/",
          "hasTests": true
        },
        "getAwesomeOscillatorStrategy": {
          "requestMethod": "GET",
          "description": "Awesome Oscillator Strategy: The awesomeOscillatorStrategy uses the _ao_ values that are generated by the Awesome Oscillator indicator function to provide a SELL action when the _ao_ is below zero, and a BUY action when _ao_ is above zero. Technical Description: null",
          "route": "/",
          "hasTests": true
        },
        "getBalanceOfPower": {
          "requestMethod": "GET",
          "description": "Balance of Power (BOP): The BalanceOfPower function calculates the strength of buying and selling pressure. Positive value indicates an upward trend, and negative value indicates a downward trend. Zero indicates a balance between the two. Technical Description: BOP = (Closing - Opening) / (High - Low)",
          "route": "/",
          "hasTests": true
        },
        "getBalanceOfPowerStrategy": {
          "requestMethod": "GET",
          "description": "Balance of Power Strategy: The balanceOfPowerStrategy uses the values that are generated by the Balance of Power (BOP) indicator to provide a BUY action when the BOP is greather than zero, and SELL action when BOP is less than zero, otherwise HOLD action. Technical Description: null",
          "route": "/",
          "hasTests": true
        },
        "getBollingerBands": {
          "requestMethod": "GET",
          "description": "Bollinger Bands (BB): The bollingerBands function calculates the bollinger bands, middle band, upper band, lower band, provides identification of when a stock is oversold or overbought. Technical Description: Middle Band = 20-Period SMA.; Upper Band = 20-Period SMA + 2 (20-Period Std); Lower Band = 20-Period SMA - 2 (20-Period Std)",
          "route": "/",
          "hasTests": true
        },
        "getBollingerBandsStrategy": {
          "requestMethod": "GET",
          "description": "Bollinger Bands Strategy: The bollingerBandsStrategy uses the upperBand, and lowerBand values that are generated by the Bollinger Bands indicator function to provide a SELL action when the asset's closing is above the upperBand, and a BUY action when the asset's closing is below the lowerBand values, a HOLD action otherwise. Technical Description: null",
          "route": "/",
          "hasTests": true
        },
        "getBollingerBandsWidth": {
          "requestMethod": "GET",
          "description": "Bollinger Band Width (BBW): The bollingerBandsWidth function measures the percentage difference between the upper band and the lower band. It decreases as Bollinger Bands narrows and increases as Bollinger Bands widens. Technical Description: Band Width = (Upper Band - Lower Band) / Middle Band",
          "route": "/",
          "hasTests": true
        },
        "getChaikinMoneyFlow": {
          "requestMethod": "GET",
          "description": "Chaikin Money Flow (CMF): The chaikinMoneyFlow measures the amount of money flow volume over a given period. Technical Description: Money Flow Multiplier = ((Closing - Low) - (High - Closing)) / (High - Low); Money Flow Volume = Money Flow Multiplier * Volume; Chaikin Money Flow = Sum(20, Money Flow Volume) / Sum(20, Volume)",
          "route": "/",
          "hasTests": true
        },
        "getChaikinMoneyFlowStrategy": {
          "requestMethod": "GET",
          "description": "Chaikin Money Flow Strategy: The chaikinMoneyFlowStrategy uses the cmf values that are generated by the Chaikin Money Flow (CMF) indicator function to provide a BUY action when cmf is less than zero, a SELL action when cmf is greather than zero, a HOLD action otherwise. Technical Description: null",
          "route": "/",
          "hasTests": true
        },
        "getChaikinOscillator": {
          "requestMethod": "GET",
          "description": "Chaikin Oscillator (CMO): The chaikinOscillator function measures the momentum of the Accumulation/Distribution (A/D) using the Moving Average Convergence Divergence (MACD) formula. It takes the difference between fast and slow periods EMA of the A/D. Cross above the A/D line indicates bullish. Technical Description: CO = Ema(fastPeriod, AD) - Ema(slowPeriod, AD)",
          "route": "/",
          "hasTests": true
        },
        "getChandeForecastOscillator": {
          "requestMethod": "GET",
          "description": "Chande Forecast Oscillator (CFO): The chandeForecastOscillator developed by Tushar Chande The Forecast Oscillator plots the percentage difference between the closing price and the n-period linear regression forecasted price. The oscillator is above zero when the forecast price is greater than the closing price and less than zero if it is below. Technical Description: R = Linreg(Closing); CFO = ((Closing - R) / Closing) * 100",
          "route": "/",
          "hasTests": true
        },
        "getChandeForecastOscillatorStrategy": {
          "requestMethod": "GET",
          "description": "Chande Forecast Oscillator Strategy: The chandeForecastOscillatorStrategy uses cfo values that are generated by the Chande Forecast Oscillator (CFO) indicator function to provide a BUY action when cfo is below zero, and SELL action when cfo is above zero. Technical Description: null",
          "route": "/",
          "hasTests": true
        },
        "getChandelierExit": {
          "requestMethod": "GET",
          "description": "Chandelier Exit (CE): The chandelierExit function sets a trailing stop-loss based on the Average True Value (ATR). Technical Description: Chandelier Exit Long = 22-Period SMA High - ATR(22) * 3; Chandelier Exit Short = 22-Period SMA Low + ATR(22) * 3",
          "route": "/",
          "hasTests": true
        },
        "getCommunityChannelIndex": {
          "requestMethod": "GET",
          "description": "Community Channel Index (CCI): The communityChannelIndex is a momentum-based oscillator used to help determine when an investment vehicle is reaching a condition of being overbought or oversold. Technical Description: Moving Average = Sma(Period, Typical Price); Mean Deviation = Sma(Period, Abs(Typical Price - Moving Average)); CMI = (Typical Price - Moving Average) / (0.015 * Mean Deviation)",
          "route": "/",
          "hasTests": true
        },
        "getDonchianChannel": {
          "requestMethod": "GET",
          "description": "Donchian Channel (DC): The donchianChannel calculates three lines generated by moving average calculations that comprise an indicator formed by upper and lower bands around a midrange or median band. Technical Description: Upper Channel = Mmax(closings, { period }); Lower Channel = Mmin(closings, { period }); Middle Channel = (Upper Channel + Lower Channel) / 2",
          "route": "/",
          "hasTests": true
        },
        "getDoubleExponentialMovingAverage": {
          "requestMethod": "GET",
          "description": "Double Exponential Moving Average (DEMA): The dema function calculates the Double Exponential Moving Average (DEMA) for a given period. The double exponential moving average (DEMA) is a technical indicator introduced by Patrick Mulloy. The purpose is to reduce the amount of noise present in price charts used by technical traders. The DEMA uses two exponential moving averages (EMAs) to eliminate lag. It helps confirm uptrends when the price is above the average, and helps confirm downtrends when the price is below the average. When the price crosses the average that may signal a trend change. Technical Description: DEMA = (2 * EMA(values)) - EMA(EMA(values))",
          "route": "/",
          "hasTests": true
        },
        "getEaseOfMovement": {
          "requestMethod": "GET",
          "description": "Ease of Movement (EMV): The easeOfMovement is a volume based oscillator measuring the ease of price movement. Technical Description: Distance Moved = ((High + Low) / 2) - ((Priod High + Prior Low) /2); Box Ratio = ((Volume / 100000000) / (High - Low)); EMV(1) = Distance Moved / Box Ratio; EMV(14) = SMA(14, EMV(1))",
          "route": "/",
          "hasTests": true
        },
        "getEaseOfMovementStrategy": {
          "requestMethod": "GET",
          "description": "Ease of Movement Strategy: The easeOfMovementStrategy uses the emv values that are generated by the Ease of Movement (EMV) indicator function to provide a BUY action when emv is greather than zero, and a SELL action when emv is less than zero, a HOLD action otherwise. Technical Description: null",
          "route": "/",
          "hasTests": true
        },
        "getExponentialMovingAverage": {
          "requestMethod": "GET",
          "description": "Exponential Moving Average (EMA): The ema function calculates the exponential moving average for a given period. Technical Description: null",
          "route": "/",
          "hasTests": true
        },
        "getForceIndex": {
          "requestMethod": "GET",
          "description": "Force Index (FI): The forceIndex uses the closing price and the volume to assess the power behind a move and identify turning points. Technical Description: Force Index = EMA(period, (Current - Previous) * Volume)",
          "route": "/",
          "hasTests": true
        },
        "getForceIndexStrategy": {
          "requestMethod": "GET",
          "description": "Force Index Strategy: The forceIndexStrategy uses the fi values that are generated by the Force Index (FI) indicator function to provide a BUY action when fi is greather than zero, and a SELL action when fi is less than zero, a HOLD action otherwise. Technical Description: null",
          "route": "/",
          "hasTests": true
        },
        "getIchimokuCloud": {
          "requestMethod": "GET",
          "description": "Ichimoku Cloud: The ichimokuCloud, also known as Ichimoku Kinko Hyo, calculates a versatile indicator that defines support and resistence, identifies trend direction, gauges momentum, and provides trading signals. Technical Description: Tenkan-sen (Conversion Line) = (9-Period High + 9-Period Low) / 2; Kijun-sen (Base Line) = (26-Period High + 26-Period Low) / 2; Senkou Span A (Leading Span A) = (Conversion Line + Base Line) / 2 projected 26 periods in the future; Senkou Span B (Leading Span B) = (52-Period High + 52-Period Low) / 2 projected 26 periods in the future; Chikou Span (Lagging Span) = Closing plotted 26 periods in the past.",
          "route": "/",
          "hasTests": true
        },
        "getIchimokuCloudStrategy": {
          "requestMethod": "GET",
          "description": "Ichimoku Cloud Strategy: The ichimokuCloudStrategy uses the _ao_ values that are generated by the Ichimoku Cloud indicator function to provide a _BUY_ action when the _leadingSpanA_ is greather than _leadingSpanB_, and a _SELL_ action when the _leadingSpanA_ is less than _leadingSpanB_, and a _HOLD_ action when _leadingSpanA_ is equal to _leadingSpanB_. Technical Description: null",
          "route": "/",
          "hasTests": true
        },
        "getKdjStrategy": {
          "requestMethod": "GET",
          "description": "KDJ Strategy: The kdjStrategy function uses the k, d, j values that are generated by the Random Index (KDJ) indicator function to provide a BUY action when k crosses above d and j. It is stronger when below 20%. Also the SELL action is when k crosses below d and j. It is strong when above 80%. Technical Description: null",
          "route": "/",
          "hasTests": true
        },
        "getKeltnerChannel": {
          "requestMethod": "GET",
          "description": "Keltner Channel (KC): The keltnerChannel provides volatility-based bands that are placed on either side of an asset's price and can aid in determining the direction of a trend. Technical Description: Middle Line = EMA(period, closings); Upper Band = EMA(period, closings) + 2 * ATR(period, highs, lows, closings); Lower Band = EMA(period, closings) - 2 * ATR(period, highs, lows, closings)",
          "route": "/",
          "hasTests": true
        },
        "getMassIndex": {
          "requestMethod": "GET",
          "description": "Mass Index (MI): The massIndex uses the high-low range to identify trend reversals based on range expansions. Technical Description: Singe EMA = EMA(9, Highs - Lows); Double EMA = EMA(9, Single EMA); Ratio = Single EMA / Double EMA; MI = Sum(25, Ratio)",
          "route": "/",
          "hasTests": true
        },
        "getMoneyFlowIndex": {
          "requestMethod": "GET",
          "description": "Money Flow Index (MFI): The moneyFlowIndex function analyzes both the closing price and the volume to measure to identify overbought and oversold states. It is similar to the Relative Strength Index (RSI), but it also uses the volume. Technical Description: Raw Money Flow = Typical Price * Volume; Money Ratio = Positive Money Flow / Negative Money Flow; Money Flow Index = 100 - (100 / (1 + Money Ratio))",
          "route": "/",
          "hasTests": true
        },
        "getMoneyFlowIndexStrategy": {
          "requestMethod": "GET",
          "description": "Money Flow Index Strategy: The moneyFlowIndexStrategy uses the mfi values that are generated by the Money Flow Index (MFI) indicator function to provide a SELL action when mfi is greather than or equal to 80, and a BUY action when mfi is less than or equal to 20. Technical Description: null",
          "route": "/",
          "hasTests": true
        },
        "getMovingAverageConvergenceDivergence": {
          "requestMethod": "GET",
          "description": "Moving Average Convergence Divergence (MACD): The macd function calculates a trend-following momentum indicator that shows the relationship between two moving averages of price. Technical Description: MACD = 12-Period EMA - 26-Period EMA.; Signal = 9-Period EMA of MACD.",
          "route": "/",
          "hasTests": true
        },
        "getMovingAverageConvergenceDivergenceStrategy": {
          "requestMethod": "GET",
          "description": "MACD Strategy: The macdStrategy uses the macd, and signal values that are generated by the Moving Average Convergence Divergence (MACD) indicator function to provide a BUY action when macd crosses above signal, and SELL action when macd crosses below signal. Technical Description: null",
          "route": "/",
          "hasTests": true
        },
        "getMovingChandeForecastOscillator": {
          "requestMethod": "GET",
          "description": "Moving Chande Forecast Oscillator (MFCO): An oscillator that calculates the moving Chande Forecast Oscillator. Technical Description: null",
          "route": "/",
          "hasTests": true
        },
        "getMovingMax": {
          "requestMethod": "GET",
          "description": "Moving Max (MMAX): The mmax function gives the maximum value within the given moving period. It can be used to get the moving maximum closing price and other values. Technical Description: null",
          "route": "/",
          "hasTests": true
        },
        "getMovingMin": {
          "requestMethod": "GET",
          "description": "Moving Min (MMIN): The mmin function gives the minimum value within the given moving period. It can be used to get the moving minimum closing price and other values. Technical Description: null",
          "route": "/",
          "hasTests": true
        },
        "getMovingStandardDeviation": {
          "requestMethod": "GET",
          "description": "Moving Standard Deviation (MSTD): The mstd function calculates the moving standard deviation for a given period. Technical Description: null",
          "route": "/",
          "hasTests": true
        },
        "getMovingSum": {
          "requestMethod": "GET",
          "description": "Moving Sum (MSUM): The msum function gives the sum value within the given moving period. Technical Description: null",
          "route": "/",
          "hasTests": true
        },
        "getNegativeVolumeIndex": {
          "requestMethod": "GET",
          "description": "Negative Volume Index (NVI): The negativeVolumeIndex function calculates a cumulative indicator using the change in volume to decide when the smart money is active. Technical Description: If Volume is greather than Previous Volume: NVI = Previous NVI; Otherwise: NVI = Previous NVI + (((Closing - Previous Closing) / Previous Closing) * Previous NVI)",
          "route": "/",
          "hasTests": true
        },
        "getNegativeVolumeIndexStrategy": {
          "requestMethod": "GET",
          "description": "Negative Volume Index Strategy: The negativeVolumeIndexStrategy uses the nvi values that are generated by the Negative Volume Index (NVI) indicator function to provide a BUY action when nvi is less than its 255-period EMA, and a SELL action when it is greather than its 255-period EMA, otherwise a HOLD action. Technical Description: null",
          "route": "/",
          "hasTests": true
        },
        "getOnBalanceVolume": {
          "requestMethod": "GET",
          "description": "On-Balance Volume (OBV): The onBalanceVolume function calculates a technical trading momentum indicator that uses volume flow to predict changes in stock price. Technical Description: OBV = OBV-Prev + volume, if Closing > Closing-Prev; 0 if Closing = Closing-Prev; -volume if Closing < Closing-Prev",
          "route": "/",
          "hasTests": true
        },
        "getParabolicSar": {
          "requestMethod": "GET",
          "description": "Parabolic SAR (PSAR): The parabolicSar function calculates an identifier for the trend and the trailing stop. Technical Description: PSAR = PSAR[i - 1] - ((PSAR[i - 1] - EP) * AF)",
          "route": "/",
          "hasTests": true
        },
        "getParabolicSARStrategy": {
          "requestMethod": "GET",
          "description": "Parabolic SAR Strategy: The parabolicSARStrategy uses the values that are generated by the Parabolic SAR indicator function to provide a BUY action when the trend is FALLING, and SELL action when the trend is RISING, and HOLD action when the trend is STABLE. Technical Description: null",
          "route": "/",
          "hasTests": true
        },
        "getPercentagePriceOscillator": {
          "requestMethod": "GET",
          "description": "Percentage Price Oscillator (PPO): The percentagePriceOscillator function calculates a momentum oscillator for the price It is used to indicate the ups and downs based on the price. A breakout is confirmed when PPO is positive. Technical Description: PPO = ((EMA(fastPeriod, prices) - EMA(slowPeriod, prices)) / EMA(longPeriod, prices)) * 100; Signal = EMA(9, PPO); Histogram = PPO - Signal",
          "route": "/",
          "hasTests": true
        },
        "getPercentageVolumeOscillator": {
          "requestMethod": "GET",
          "description": "Percentage Volume Oscillator (PVO): The percentageVolumeOscillator function calculates a momentum oscillator for the volume It is used to indicate the ups and downs based on the volume. A breakout is confirmed when PVO is positive. Technical Description: PVO = ((EMA(fastPeriod, volumes) - EMA(slowPeriod, volumes)) / EMA(longPeriod, volumes)) * 100; Signal = EMA(9, PVO); Histogram = PVO - Signal",
          "route": "/",
          "hasTests": true
        },
        "getPriceRateOfChange": {
          "requestMethod": "GET",
          "description": "Price Rate of Change (ROC): The roc function calculates a unbounded momentum indicator for the closing prices. A rising ROC above zero typically indicates an uptrend whereas a falling ROC below zero indicates a downtrend. Technical Description: ROC[i] = 0 when i < period; ROC[i] = (close[i] / close[i-period] - 1) * 100 when i >= period",
          "route": "/",
          "hasTests": true
        },
        "getProjectionOscillator": {
          "requestMethod": "GET",
          "description": "Projection Oscillator (PO): The projectionOscillator calculates the Projection Oscillator (PO). The PO uses the linear regression slope, along with highs and lows. Technical Description: PL = Min(period, (high + MLS(period, x, high))); PU = Max(period, (low + MLS(period, x, low))); PO = 100 * (Closing - PL) / (PU - PL); SPO = EMA(smooth, PO)",
          "route": "/",
          "hasTests": true
        },
        "getProjectionOscillatorStrategy": {
          "requestMethod": "GET",
          "description": "Projection Oscillator Strategy: The projectionOscillatorStrategy uses po and spo values that are generated by the Projection Oscillator (PO) indicator function to provide a BUY action when po is above spo, and SELL action when po is below spo. Technical Description: null",
          "route": "/",
          "hasTests": true
        },
        "getQstick": {
          "requestMethod": "GET",
          "description": "Qstick: The qstick function calculates the ratio of recent up and down bars. Technical Description: QS = Sma(Closing - Opening)",
          "route": "/",
          "hasTests": true
        },
        "getRandomIndex": {
          "requestMethod": "GET",
          "description": "Random Index (KDJ): The kdj function calculates the KDJ indicator, also known as the Random Index. KDJ is calculated similar to the Stochastic Oscillator with the difference of having the J line. It is used to analyze the trend and entry points. Technical Description: RSV = ((Closing - Min(Low, rPeriod)) / (Max(High, rPeriod) - Min(Low, rPeriod))) * 100; K = Sma(RSV, kPeriod); D = Sma(K, dPeriod); J = (3 * K) - (2 * D)",
          "route": "/",
          "hasTests": true
        },
        "getRelativeStrengthIndex": {
          "requestMethod": "GET",
          "description": "Relative Strength Index (RSI): The rsi function calculates a momentum indicator that measures the magnitude of recent price changes to evaluate overbought and oversold conditions using a window period. Technical Description: RS = Average Gain / Average Loss; RSI = 100 - (100 / (1 + RS))",
          "route": "/",
          "hasTests": true
        },
        "getRollingMovingAverage": {
          "requestMethod": "GET",
          "description": "Rolling Moving Average (RMA): The rma function calculates the rolling moving average for a given period. Technical Description: R[0] to R[p-1] is SMA(values); R[p] and after is R[i] = ((R[i-1]*(p-1)) + v[i]) / p",
          "route": "/",
          "hasTests": true
        },
        "getRsi2Strategy": {
          "requestMethod": "GET",
          "description": "RSI 2 Strategy: The rsi2Strategy uses the _rsi_ values that are generated by the RSI 2 indicator function to provide a _BUY_ action when 2-period RSI moves below 10, and a _SELL_ action when the 2-period RSI moved above 90, and a _HOLD_ action otherwise. Technical Description: null",
          "route": "/",
          "hasTests": true
        },
        "getSimpleMovingAverage": {
          "requestMethod": "GET",
          "description": "Simple Moving Average (SMA): The sma function calculates the simple moving average for a given period. Technical Description: null",
          "route": "/",
          "hasTests": true
        },
        "getSince": {
          "requestMethod": "GET",
          "description": "Since Change: The since function provides the number values since the last change. Technical Description: null",
          "route": "/",
          "hasTests": true
        },
        "getStochasticOscillator": {
          "requestMethod": "GET",
          "description": "Stochastic Oscillator (STOCH): The stochasticOscillator function calculates a momentum indicator that shows the location of the closing relative to high-low range over a set number of periods. Technical Description: K = (Closing - Lowest Low) / (Highest High - Lowest Low) * 100; D = 3-Period SMA of K",
          "route": "/",
          "hasTests": true
        },
        "getStochasticOscillatorStrategy": {
          "requestMethod": "GET",
          "description": "Stochastic Oscillator Strategy: The stochasticOscillatorStrategy uses the _ao_ values that are generated by the Stochastic Oscillator indicator function to provide a _BUY_ action when _k_ and _d_ are less than 20, a _SELL_ action when the _k_ and _d_ are greather than 80, a _HOLD_ action otherwise. Technical Description: null",
          "route": "/",
          "hasTests": true
        },
        "getTriangularMovingAverage": {
          "requestMethod": "GET",
          "description": "Triangular Moving Average (TRIMA): The trima function calculates the Triangular Moving Average (TRIMA) for a given period. It is a weighted moving average putting more weight to the middle values. Technical Description: If period is even: TRIMA = SMA(period / 2, SMA((period / 2) + 1, values)); If period is odd: TRIMA = SMA((period + 1) / 2, SMA((period + 1) / 2, values))",
          "route": "/",
          "hasTests": true
        },
        "getTripleExponentialAverage": {
          "requestMethod": "GET",
          "description": "Triple Exponential Average (TRIX): The trix indicator is an oscillator used to identify oversold and overbought markets, and it can also be used as a momentum indicator. Technical Description: EMA1 = EMA(period, values); EMA2 = EMA(period, EMA1); EMA3 = EMA(period, EMA2); TRIX = (EMA3 - Previous EMA3) / Previous EMA3",
          "route": "/",
          "hasTests": true
        },
        "getTripleExponentialMovingAverage": {
          "requestMethod": "GET",
          "description": "Triple Exponential Moving Average (TEMA): The tema function calculates the Triple Exponential Moving Average (TEMA) for a given period. It reduces lag by taking multiple EMAs of the original EMA and subtracting out some of the lag. Technical Description: TEMA = (3 * EMA1) - (3 * EMA2) + EMA3; EMA1 = EMA(values); EMA2 = EMA(EMA1); EMA3 = EMA(EMA2)",
          "route": "/",
          "hasTests": true
        },
        "getTrueRange": {
          "requestMethod": "GET",
          "description": "True Range (TR): The trueRange function calculates the True Range (TR) for a given period. Technical Description: TR = Max((High - Low), Abs(High - Closing[-1]), Abs(Low - Closing[-1]))",
          "route": "/",
          "hasTests": true
        },
        "getTypicalPrice": {
          "requestMethod": "GET",
          "description": "Typical Price: The typicalPrice function calculates another approximation of average price for each period and can be used as a filter for moving average systems. Technical Description: Typical Price = (High + Low + Closing) / 3",
          "route": "/",
          "hasTests": true
        },
        "getTypicalPriceStrategy": {
          "requestMethod": "GET",
          "description": "Typical Price Strategy: The typicalPriceStrategy uses the values that are generated by the Typical Price indicator function to provide a BUY action when the value is greather than the previous value, and SELL action when the value is less than the previous value, and HOLD action when value is equal to the previous value. Technical Description: null",
          "route": "/",
          "hasTests": true
        },
        "getUlcerIndex": {
          "requestMethod": "GET",
          "description": "Ulcer Index (UI): The ulcerIndex measures downside risk. The index increases in value as the price moves farther away from a recent high and falls as the price rises to new highs. Technical Description: High Closings = Max(period, Closings); Percentage Drawdown = 100 * ((Closings - High Closings) / High Closings); Squared Average = Sma(period, Percent Drawdown * Percent Drawdown); Ulcer Index = Sqrt(Squared Average)",
          "route": "/",
          "hasTests": true
        },
        "getVolumePriceTrend": {
          "requestMethod": "GET",
          "description": "Volume Price Trend (VPT): The volumePriceTrend provides a correlation between the volume and the price. Technical Description: VPT = Previous VPT + (Volume * (Current Closing - Previous Closing) / Previous Closing)",
          "route": "/",
          "hasTests": true
        },
        "getVolumeWeightedAveragePrice": {
          "requestMethod": "GET",
          "description": "Volume Weighted Average Price (VWAP): The volumeWeightedAveragePrice provides the average price the asset has traded. Technical Description: VWAP = Sum(Closing * Volume) / Sum(Volume)",
          "route": "/",
          "hasTests": true
        },
        "getVolumeWeightedAveragePriceStrategy": {
          "requestMethod": "GET",
          "description": "Volume Weighted Average Price Strategy: The volumeWeightedAveragePriceStrategy uses the values that are generated by the Volume Weighted Average Price (VWAP) indicator function to provide a BUY action when the closing is below the VWAP, and a SELL action when the closing is below the VWAP, a HOLD action otherwise. Technical Description: null",
          "route": "/",
          "hasTests": true
        },
        "getVolumeWeightedMovingAverage": {
          "requestMethod": "GET",
          "description": "Volume Weighted Moving Average (VWMA): The vwma function calculates the Volume Weighted Moving Average (VWMA) averaging the price data with an emphasis on volume, meaning areas with higher volume will have a greater weight. Technical Description: VWMA = Sum(Price * Volume) / Sum(Volume) for a given Period.",
          "route": "/",
          "hasTests": true
        },
        "getVolumeWeightedMovingAverageStrategy": {
          "requestMethod": "GET",
          "description": "Volume Weighted Moving Average (VWMA) Strategy: The vwmaStrategy function uses SMA and VWMA indicators to provide a BUY action when VWMA is above SMA, and a SELL signal when VWMA is below SMA, a HOLD signal otherwise. Technical Description: null",
          "route": "/",
          "hasTests": true
        },
        "getVortex": {
          "requestMethod": "GET",
          "description": "Vortex Indicator: The vortex function provides two oscillators that capture positive and negative trend movement. Technical Description: +VM = Abs(Current High - Prior Low); -VM = Abs(Current Low - Prior High); +VM14 = 14-Period Sum of +VM; -VM14 = 14-Period Sum of -VM; TR = Max((High[i]-Low[i]), Abs(High[i]-Closing[i-1]), Abs(Low[i]-Closing[i-1])); TR14 = 14-Period Sum of TR; +VI14 = +VM14 / TR14; -VI14 = -VM14 / TR14",
          "route": "/",
          "hasTests": true
        },
        "getVortexStrategy": {
          "requestMethod": "GET",
          "description": "Vortex Strategy: The vortexStrategy uses the values that are generated by the Vortex Indicator indicator function to provide a BUY action when the plusVi is greather than the minusVi, and SELL action when the plusVi is less than the minusVi, and HOLD action when the plusVi is equal to the minusVi. Technical Description: null",
          "route": "/",
          "hasTests": true
        },
        "getWilliamsR": {
          "requestMethod": "GET",
          "description": "Williams R (WILLR): The williamsR function calculates the Williams R based on low, high, and closing prices. It is a type of momentum indicator that moves between 0 and -100 and measures overbought and oversold levels. Technical Description: WR = (Highest High - Closing) / (Highest High - Lowest Low)",
          "route": "/",
          "hasTests": true
        },
        "getWilliamsRStrategy": {
          "requestMethod": "GET",
          "description": "Williams R Strategy: The williamsRStrategy uses the _wr_ values that are generated by the Williams R indicator function to provide a SELL action when the _wr_ is below -20, and a BUY action when _wr_ is above -80. Technical Description: null",
          "route": "/",
          "hasTests": true
        }
      },
      "routeCount": 78
    },
    {
      "namespace": "jupiter",
      "name": "Jupiter Token Price Checker",
      "description": "Fetches token prices from Jupiter DEX aggregator, priced by default against USDC, with optional vsToken.",
      "tags": [],
      "docs": [
        "https://station.jup.ag/docs/api/lite-api",
        "https://dev.jup.ag/docs/price-api/"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "jupiter/jupiter-all.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/jupiter/jupiter-all.mjs",
      "routes": {
        "getTokenPrice": {
          "requestMethod": "GET",
          "description": "Returns the price of one or more tokens, optionally against a specified vsToken (defaults to USDC).",
          "route": "/price/v2",
          "hasTests": true
        },
        "getTokenInfo": {
          "requestMethod": "GET",
          "description": "Get information about a token using its mint address.",
          "route": "/tokens/v1/token/:mintAddress",
          "hasTests": true
        },
        "getTokensInMarket": {
          "requestMethod": "GET",
          "description": "Get list of token mints belonging to a market address.",
          "route": "/tokens/v1/market/:marketAddress/mints",
          "hasTests": true
        },
        "getAllTradableTokens": {
          "requestMethod": "GET",
          "description": "Retrieve a list of all tradable token mints on Jupiter.",
          "route": "/tokens/v1/mints/tradable",
          "hasTests": true
        },
        "getTaggedTokens": {
          "requestMethod": "GET",
          "description": "Fetch token info for tokens matching specific tags.",
          "route": "/tokens/v1/tagged/:tags",
          "hasTests": true
        },
        "getNewTokens": {
          "requestMethod": "GET",
          "description": "Retrieve new tokens, ordered by creation timestamp.",
          "route": "/tokens/v1/new",
          "hasTests": true
        },
        "getAllTokens": {
          "requestMethod": "GET",
          "description": "Fetch all tokens indexed by Jupiter. This is a large payload.",
          "route": "/tokens/v1/all",
          "hasTests": true
        }
      },
      "routeCount": 7
    },
    {
      "namespace": "llama",
      "name": "DeFiYieldsServer",
      "description": "Fetch and analyze DeFi yield pools from yields.llama.fi",
      "tags": [],
      "docs": [
        "https://docs.llama.fi/pro-api"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "llama-fi/getPools.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/llama-fi/getPools.mjs",
      "routes": {
        "getProjectsByName": {
          "requestMethod": "GET",
          "description": "Fetch DeFi yield pools overview, optionally filtering by blockchain or project name",
          "route": "/pools",
          "hasTests": true
        },
        "getPools": {
          "requestMethod": "GET",
          "description": "Fetch DeFi yield pools, optionally filtering by blockchain or project name",
          "route": "/pools",
          "hasTests": true
        }
      },
      "routeCount": 2
    },
    {
      "namespace": "luksoNetwork",
      "name": "ERC725UniversalProfile",
      "description": "Minimal schema for reading Universal Profile data via getData and fetchData",
      "tags": [],
      "docs": [
        "https://github.com/ERC725Alliance/erc725.js",
        "https://docs.lukso.tech/learn/overview"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "erc725/universalProfile.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/erc725/universalProfile.mjs",
      "routes": {
        "readProfileData": {
          "requestMethod": "GET",
          "description": "Calls getData() to retrieve full profile data",
          "route": "/",
          "hasTests": true
        },
        "fetchProfileMetadata": {
          "requestMethod": "GET",
          "description": "Calls fetchData() to retrieve LSP3Profile metadata",
          "route": "/",
          "hasTests": true
        },
        "getUniversalReceiverAddress": {
          "requestMethod": "GET",
          "description": "Calls getData() to retrieve LSP1UniversalReceiverDelegate address",
          "route": "/",
          "hasTests": true
        }
      },
      "routeCount": 3
    },
    {
      "namespace": "luksoNetwork",
      "name": "LUKSO BlockScout Addresses",
      "description": "All address-level endpoints for LUKSO BlockScout",
      "tags": [],
      "docs": [
        "https://explorer.execution.mainnet.lukso.network/api-docs",
        "https://explorer.execution.testnet.lukso.network/api-docs"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "lukso-network/address.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/lukso-network/address.mjs",
      "routes": {
        "listAddresses": {
          "requestMethod": "GET",
          "description": "List native coin holders",
          "route": "/addresses",
          "hasTests": true
        },
        "getAddress": {
          "requestMethod": "GET",
          "description": "Basic address info",
          "route": "/addresses/:address_hash",
          "hasTests": true
        },
        "getAddressCounters": {
          "requestMethod": "GET",
          "description": "Address usage counters",
          "route": "/addresses/:address_hash/counters",
          "hasTests": true
        },
        "getAddressTransactions": {
          "requestMethod": "GET",
          "description": "Get transactions by address",
          "route": "/addresses/:address_hash/transactions",
          "hasTests": true
        },
        "getAddressTokenTransfers": {
          "requestMethod": "GET",
          "description": "Token transfers for address",
          "route": "/addresses/:address_hash/token-transfers",
          "hasTests": true
        },
        "getAddressInternalTxs": {
          "requestMethod": "GET",
          "description": "Internal txs for address",
          "route": "/addresses/:address_hash/internal-transactions",
          "hasTests": true
        },
        "getAddressLogs": {
          "requestMethod": "GET",
          "description": "Logs emitted to/from address",
          "route": "/addresses/:address_hash/logs",
          "hasTests": true
        },
        "getBlocksValidated": {
          "requestMethod": "GET",
          "description": "Blocks validated by address",
          "route": "/addresses/:address_hash/blocks-validated",
          "hasTests": true
        },
        "getTokenBalances": {
          "requestMethod": "GET",
          "description": "Token balances grouped",
          "route": "/addresses/:address_hash/tokens",
          "hasTests": true
        },
        "getFlatTokenBalances": {
          "requestMethod": "GET",
          "description": "All token balances (flat)",
          "route": "/addresses/:address_hash/token-balances",
          "hasTests": true
        },
        "getCoinBalanceHistory": {
          "requestMethod": "GET",
          "description": "Native coin balance history",
          "route": "/addresses/:address_hash/coin-balance-history",
          "hasTests": true
        },
        "getCoinBalanceByDay": {
          "requestMethod": "GET",
          "description": "Daily coin balance history",
          "route": "/addresses/:address_hash/coin-balance-history-by-day",
          "hasTests": true
        }
      },
      "routeCount": 12
    },
    {
      "namespace": "luksoNetwork",
      "name": "LUKSO BlockScout Blocks",
      "description": "Retrieve blocks and related data from LUKSO BlockScout",
      "tags": [],
      "docs": [
        "https://explorer.execution.mainnet.lukso.network/api-docs",
        "https://explorer.execution.testnet.lukso.network/api-docs"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "lukso-network/blocks.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/lukso-network/blocks.mjs",
      "routes": {
        "getBlocks": {
          "requestMethod": "GET",
          "description": "List recent blocks (optional filtering)",
          "route": "/blocks",
          "hasTests": true
        },
        "getBlockById": {
          "requestMethod": "GET",
          "description": "Get detailed info for a block",
          "route": "/blocks/:block_id",
          "hasTests": true
        },
        "getBlockTransactions": {
          "requestMethod": "GET",
          "description": "Get transactions within a block",
          "route": "/blocks/:block_id/transactions",
          "hasTests": true
        },
        "getBlockWithdrawals": {
          "requestMethod": "GET",
          "description": "Get withdrawals from a block",
          "route": "/blocks/:block_id/withdrawals",
          "hasTests": true
        }
      },
      "routeCount": 4
    },
    {
      "namespace": "luksoNetwork",
      "name": "LuksoMainnetSubgraph",
      "description": "Query the Lukso Mainnet GraphQL endpoint.",
      "tags": [],
      "docs": [
        "https://explorer.execution.testnet.lukso.network/graphiql",
        "https://explorer.execution.mainnet.lukso.network/graphiql"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "lukso-network/graphql.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/lukso-network/graphql.mjs",
      "routes": {
        "getLuksoExplorerSchema": {
          "requestMethod": "POST",
          "description": "Execute a GraphQL query against the LUKSO mainnet subgraph.",
          "route": "/v1/graphql",
          "hasTests": true
        },
        "fectchLuksoExplorer": {
          "requestMethod": "POST",
          "description": "Run a raw GraphQL query on a lukso explorer.",
          "route": "/v1/graphql",
          "hasTests": true
        }
      },
      "routeCount": 2
    },
    {
      "namespace": "luksoNetwork",
      "name": "LUKSO BlockScout Meta",
      "description": "Main page, config, health and Celestia-specific endpoints",
      "tags": [],
      "docs": [
        "https://explorer.execution.mainnet.lukso.network/api-docs",
        "https://explorer.execution.testnet.lukso.network/api-docs"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "lukso-network/internal.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/lukso-network/internal.mjs",
      "routes": {
        "getMainPageTransactions": {
          "requestMethod": "GET",
          "description": "Latest transactions for main page",
          "route": "/main-page/transactions",
          "hasTests": true
        },
        "getMainPageBlocks": {
          "requestMethod": "GET",
          "description": "Latest blocks for main page",
          "route": "/main-page/blocks",
          "hasTests": true
        }
      },
      "routeCount": 2
    },
    {
      "namespace": "luksoNetwork",
      "name": "LUKSO BlockScout NFTs",
      "description": "Query NFTs owned by address or smart contract",
      "tags": [],
      "docs": [
        "https://explorer.execution.mainnet.lukso.network/api-docs",
        "https://explorer.execution.testnet.lukso.network/api-docs"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "lukso-network/nfts.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/lukso-network/nfts.mjs",
      "routes": {
        "getNFTsByAddress": {
          "requestMethod": "GET",
          "description": "NFTs owned by address",
          "route": "/addresses/:address_hash/nft",
          "hasTests": true
        },
        "getNFTCollectionsByAddress": {
          "requestMethod": "GET",
          "description": "NFTs grouped by collection",
          "route": "/addresses/:address_hash/nft/collections",
          "hasTests": true
        },
        "getNFTInstancesByContract": {
          "requestMethod": "GET",
          "description": "List all NFT instances in contract",
          "route": "/tokens/:address_hash/instances",
          "hasTests": true
        },
        "getNFTInstanceById": {
          "requestMethod": "GET",
          "description": "Get one NFT by ID",
          "route": "/tokens/:address_hash/instances/:id",
          "hasTests": true
        },
        "getNFTInstanceTransfers": {
          "requestMethod": "GET",
          "description": "Transfers of a specific NFT",
          "route": "/tokens/:address_hash/instances/:id/transfers",
          "hasTests": true
        },
        "getNFTInstanceHolders": {
          "requestMethod": "GET",
          "description": "Get holders of an NFT instance",
          "route": "/tokens/:address_hash/instances/:id/holders",
          "hasTests": true
        },
        "getNFTInstanceTransfersCount": {
          "requestMethod": "GET",
          "description": "Count transfers of an NFT instance",
          "route": "/tokens/:address_hash/instances/:id/transfers-count",
          "hasTests": true
        }
      },
      "routeCount": 7
    },
    {
      "namespace": "luksoNetwork",
      "name": "LUKSO BlockScout Search",
      "description": "Search and redirect endpoints from LUKSO BlockScout API",
      "tags": [],
      "docs": [
        "https://explorer.execution.mainnet.lukso.network/api-docs",
        "https://explorer.execution.testnet.lukso.network/api-docs"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "lukso-network/search.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/lukso-network/search.mjs",
      "routes": {
        "search": {
          "requestMethod": "GET",
          "description": "Search across tokens, addresses, blocks and transactions",
          "route": "/search",
          "hasTests": true
        },
        "searchRedirect": {
          "requestMethod": "GET",
          "description": "Check if search redirects to a specific resource",
          "route": "/search/check-redirect",
          "hasTests": true
        }
      },
      "routeCount": 2
    },
    {
      "namespace": "luksoNetwork",
      "name": "Contract",
      "description": "API for interacting with smart contract metadata and state on LUKSO chains.",
      "tags": [],
      "docs": [
        "https://explorer.execution.mainnet.lukso.network/api-docs",
        "https://explorer.execution.testnet.lukso.network/api-docs"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "lukso-network/sourceCode.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/lukso-network/sourceCode.mjs",
      "routes": {
        "listcontracts": {
          "requestMethod": "GET",
          "description": "List sorted contracts, optionally filtered.",
          "route": "/",
          "hasTests": true
        },
        "getabi": {
          "requestMethod": "GET",
          "description": "Get ABI for a verified contract.",
          "route": "/",
          "hasTests": true
        },
        "getsourcecode": {
          "requestMethod": "GET",
          "description": "Get contract source code.",
          "route": "/",
          "hasTests": true
        },
        "getcontractcreation": {
          "requestMethod": "GET",
          "description": "Get contract creator and creation tx hash.",
          "route": "/",
          "hasTests": true
        }
      },
      "routeCount": 4
    },
    {
      "namespace": "luksoNetwork",
      "name": "LUKSO BlockScout Statistics",
      "description": "Charts and blockchain stats from LUKSO BlockScout",
      "tags": [],
      "docs": [
        "https://explorer.execution.mainnet.lukso.network/api-docs",
        "https://explorer.execution.testnet.lukso.network/api-docs"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "lukso-network/stats.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/lukso-network/stats.mjs",
      "routes": {
        "getStats": {
          "requestMethod": "GET",
          "description": "General blockchain stats",
          "route": "/stats",
          "hasTests": true
        },
        "getTransactionChart": {
          "requestMethod": "GET",
          "description": "Transaction activity chart",
          "route": "/stats/charts/transactions",
          "hasTests": true
        },
        "getMarketChart": {
          "requestMethod": "GET",
          "description": "Token market stats (price, cap, etc.)",
          "route": "/stats/charts/market",
          "hasTests": true
        }
      },
      "routeCount": 3
    },
    {
      "namespace": "luksoNetwork",
      "name": "LUKSO BlockScout Tokens",
      "description": "Token-related endpoints for transfers, holders, and stats",
      "tags": [],
      "docs": [
        "https://explorer.execution.mainnet.lukso.network/api-docs",
        "https://explorer.execution.testnet.lukso.network/api-docs"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "lukso-network/tokens.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/lukso-network/tokens.mjs",
      "routes": {
        "listTokens": {
          "requestMethod": "GET",
          "description": "List all tokens",
          "route": "/tokens",
          "hasTests": true
        },
        "getTokenByAddress": {
          "requestMethod": "GET",
          "description": "Get token metadata",
          "route": "/tokens/:address_hash",
          "hasTests": true
        },
        "getTokenTransfersByAddress": {
          "requestMethod": "GET",
          "description": "Token transfer history",
          "route": "/tokens/:address_hash/transfers",
          "hasTests": true
        },
        "getTokenHolders": {
          "requestMethod": "GET",
          "description": "List token holders",
          "route": "/tokens/:address_hash/holders",
          "hasTests": true
        },
        "getTokenCounters": {
          "requestMethod": "GET",
          "description": "Token analytics counters",
          "route": "/tokens/:address_hash/counters",
          "hasTests": true
        }
      },
      "routeCount": 5
    },
    {
      "namespace": "luksoNetwork",
      "name": "LUKSO BlockScout Transactions",
      "description": "Fetch transactions and their associated data from LUKSO BlockScout",
      "tags": [],
      "docs": [
        "https://explorer.execution.mainnet.lukso.network/api-docs",
        "https://explorer.execution.testnet.lukso.network/api-docs"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "lukso-network/transactions.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/lukso-network/transactions.mjs",
      "routes": {
        "getTransactions": {
          "requestMethod": "GET",
          "description": "List transactions (filterable)",
          "route": "/transactions",
          "hasTests": true
        },
        "getTransactionByHash": {
          "requestMethod": "GET",
          "description": "Details of a transaction",
          "route": "/transactions/:transaction_hash",
          "hasTests": true
        },
        "getTokenTransfersByTransactionHash": {
          "requestMethod": "GET",
          "description": "Token transfers in transaction",
          "route": "/transactions/:transaction_hash/token-transfers",
          "hasTests": true
        },
        "getInternalTransactions": {
          "requestMethod": "GET",
          "description": "Internal txs in transaction",
          "route": "/transactions/:transaction_hash/internal-transactions",
          "hasTests": true
        },
        "getLogs": {
          "requestMethod": "GET",
          "description": "Logs from transaction",
          "route": "/transactions/:transaction_hash/logs",
          "hasTests": true
        },
        "getRawTrace": {
          "requestMethod": "GET",
          "description": "Raw trace of transaction",
          "route": "/transactions/:transaction_hash/raw-trace",
          "hasTests": true
        },
        "getStateChanges": {
          "requestMethod": "GET",
          "description": "State changes in transaction",
          "route": "/transactions/:transaction_hash/state-changes",
          "hasTests": true
        }
      },
      "routeCount": 7
    },
    {
      "namespace": "medium",
      "name": "Medium RSS Feeds",
      "description": "Access Medium articles and posts via RSS feeds by tag, user, or publication",
      "tags": [
        "content",
        "social",
        "feeds"
      ],
      "docs": [
        "https://help.medium.com/hc/en-us/articles/214874118-RSS-feeds"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "medium-com/rss-feeds.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/medium-com/rss-feeds.mjs",
      "routes": {
        "getTagFeed": {
          "requestMethod": "GET",
          "description": "Get RSS feed for articles with a specific tag",
          "route": "/tag/:tag",
          "hasTests": true
        },
        "getUserFeed": {
          "requestMethod": "GET",
          "description": "Get RSS feed for a specific Medium user's articles",
          "route": "/@:username",
          "hasTests": true
        },
        "getPublicationFeed": {
          "requestMethod": "GET",
          "description": "Get RSS feed for a specific Medium publication",
          "route": "/:publication",
          "hasTests": true
        },
        "getTopicFeed": {
          "requestMethod": "GET",
          "description": "Get RSS feed for a specific Medium topic",
          "route": "/topic/:topic",
          "hasTests": true
        }
      },
      "routeCount": 4
    },
    {
      "namespace": "memoryLol",
      "name": "TwitterUsernameChanges",
      "description": "Get Twitter username change history via memory.lol API.",
      "tags": [],
      "docs": [
        "https://github.com/travisbrown/memory.lol"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "memory-lol/twitterNameChanges.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/memory-lol/twitterNameChanges.mjs",
      "routes": {
        "queryUsernameChanges": {
          "requestMethod": "GET",
          "description": "Fetch username change history for a Twitter user.",
          "route": "/v1/tw/:screen_name",
          "hasTests": true
        }
      },
      "routeCount": 1
    },
    {
      "namespace": "minascanDevnet",
      "name": "MinaScan Devnet GraphQL API",
      "description": "Access Mina Protocol devnet blockchain data through MinaScan's GraphQL endpoint.",
      "tags": [
        "production",
        "blockchain",
        "explorer",
        "mina"
      ],
      "docs": [
        "https://api.minascan.io",
        "https://minaprotocol.com"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "minascan-io/mina-devnet.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/minascan-io/mina-devnet.mjs",
      "routes": {
        "getMinaDevnetSchema": {
          "requestMethod": "POST",
          "description": "Get the complete GraphQL schema structure from MinaScan devnet endpoint.",
          "route": "/",
          "hasTests": true
        },
        "getMinaDevnetQuery": {
          "requestMethod": "POST",
          "description": "Execute a custom GraphQL query against the MinaScan devnet endpoint.",
          "route": "/",
          "hasTests": true
        }
      },
      "routeCount": 2
    },
    {
      "namespace": "minascanMainnet",
      "name": "MinaScan Mainnet GraphQL API",
      "description": "Access Mina Protocol mainnet blockchain data through MinaScan's GraphQL endpoint.",
      "tags": [
        "production",
        "blockchain",
        "explorer",
        "mina"
      ],
      "docs": [
        "https://api.minascan.io",
        "https://minaprotocol.com"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "minascan-io/mina-mainnet.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/minascan-io/mina-mainnet.mjs",
      "routes": {
        "getMinaMainnetSchema": {
          "requestMethod": "POST",
          "description": "Get the complete GraphQL schema structure from MinaScan mainnet endpoint.",
          "route": "/",
          "hasTests": true
        },
        "getMinaMainnetQuery": {
          "requestMethod": "POST",
          "description": "Execute a custom GraphQL query against the MinaScan mainnet endpoint.",
          "route": "/",
          "hasTests": true
        }
      },
      "routeCount": 2
    },
    {
      "namespace": "moralis",
      "name": "Moralis blockchainApi API",
      "description": "Moralis blockchainApi API",
      "tags": [],
      "docs": [
        "https://docs.moralis.com"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [
        "MORALIS_API_KEY"
      ],
      "hasApiKey": true,
      "path": "eth/blockchainApi.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/eth/blockchainApi.mjs",
      "routes": {
        "/block/:block_number_or_hash": {
          "requestMethod": "GET",
          "description": "Get the contents of a block given the block hash.",
          "route": "/block/:block_number_or_hash",
          "hasTests": true
        },
        "/dateToBlock": {
          "requestMethod": "GET",
          "description": "Get the closest block given the date.",
          "route": "/dateToBlock",
          "hasTests": true
        },
        "/transaction/:transaction_hash/verbose": {
          "requestMethod": "GET",
          "description": "Get the contents of a transaction by the given transaction hash.",
          "route": "/transaction/:transaction_hash/verbose",
          "hasTests": true
        },
        "/:address/verbose": {
          "requestMethod": "GET",
          "description": "Get native transactions and logs ordered by block number in descending order.",
          "route": "/:address/verbose",
          "hasTests": true
        },
        "/latestBlockNumber/:chain": {
          "requestMethod": "GET",
          "description": "Returns the latest block number for the given chain.",
          "route": "/latestBlockNumber/:chain",
          "hasTests": true
        },
        "/transaction/:transaction_hash": {
          "requestMethod": "GET",
          "description": "Get the contents of a transaction by the given transaction hash.",
          "route": "/transaction/:transaction_hash",
          "hasTests": true
        },
        "/:address": {
          "requestMethod": "GET",
          "description": "Get native transactions ordered by block number in descending order.",
          "route": "/:address",
          "hasTests": true
        }
      },
      "routeCount": 7
    },
    {
      "namespace": "moralis",
      "name": "Moralis defiApi API",
      "description": "Moralis defiApi API",
      "tags": [],
      "docs": [
        "https://docs.moralis.com"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [
        "MORALIS_API_KEY"
      ],
      "hasApiKey": true,
      "path": "eth/defiApi.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/eth/defiApi.mjs",
      "routes": {
        "/wallets/:address/defi/:protocol/positions": {
          "requestMethod": "GET",
          "description": "Get the detailed defi positions by protocol for a wallet address.",
          "route": "/wallets/:address/defi/:protocol/positions",
          "hasTests": true
        },
        "/wallets/:address/defi/positions": {
          "requestMethod": "GET",
          "description": "Get the positions summary of a wallet address.",
          "route": "/wallets/:address/defi/positions",
          "hasTests": true
        },
        "/wallets/:address/defi/summary": {
          "requestMethod": "GET",
          "description": "Get the defi summary of a wallet address.",
          "route": "/wallets/:address/defi/summary",
          "hasTests": true
        }
      },
      "routeCount": 3
    },
    {
      "namespace": "moralis",
      "name": "Moralis entity API",
      "description": "Moralis entity API",
      "tags": [],
      "docs": [
        "https://docs.moralis.com"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [
        "MORALIS_API_KEY"
      ],
      "hasApiKey": true,
      "path": "eth/entity.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/eth/entity.mjs",
      "routes": {
        "/entities/categories": {
          "requestMethod": "GET",
          "description": "Get Entity Categories",
          "route": "/entities/categories",
          "hasTests": true
        }
      },
      "routeCount": 1
    },
    {
      "namespace": "moralis",
      "name": "Moralis nftApi API",
      "description": "Moralis nftApi API",
      "tags": [],
      "docs": [
        "https://docs.moralis.com"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [
        "MORALIS_API_KEY"
      ],
      "hasApiKey": true,
      "path": "eth/nftApi.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/eth/nftApi.mjs",
      "routes": {
        "/market-data/nfts/top-collections": {
          "requestMethod": "GET",
          "description": "Get the top NFT collections by market cap",
          "route": "/market-data/nfts/top-collections",
          "hasTests": true
        },
        "/market-data/nfts/hottest-collections": {
          "requestMethod": "GET",
          "description": "Get the top NFT collections by trading volume",
          "route": "/market-data/nfts/hottest-collections",
          "hasTests": true
        },
        "/nft/:address": {
          "requestMethod": "GET",
          "description": "Get NFTs for a given contract address, including metadata for all NFTs (where available).",
          "route": "/nft/:address",
          "hasTests": true
        },
        "/nft/:address/stats": {
          "requestMethod": "GET",
          "description": "Get the stats for a nft collection address.",
          "route": "/nft/:address/stats",
          "hasTests": true
        },
        "/nft/:address/metadata": {
          "requestMethod": "GET",
          "description": "Get the collection / contract level metadata for a given contract (name, symbol, base token URI).",
          "route": "/nft/:address/metadata",
          "hasTests": true
        },
        "/nft/:address/transfers": {
          "requestMethod": "GET",
          "description": "Get transfers of NFTs for a given contract and other parameters.",
          "route": "/nft/:address/transfers",
          "hasTests": true
        },
        "/nft/:address/:token_id": {
          "requestMethod": "GET",
          "description": "Get NFT data, including metadata (where available), for the given NFT token ID and contract address.",
          "route": "/nft/:address/:token_id",
          "hasTests": true
        },
        "/nft/:address/owners": {
          "requestMethod": "GET",
          "description": "Get owners of NFTs for a given contract.",
          "route": "/nft/:address/owners",
          "hasTests": true
        },
        "/nft/:address/:token_id/owners": {
          "requestMethod": "GET",
          "description": "Get owners of a specific NFT given the contract address and token ID.",
          "route": "/nft/:address/:token_id/owners",
          "hasTests": true
        },
        "/nft/:address/:token_id/trades": {
          "requestMethod": "GET",
          "description": "Get trades of NFTs for a given contract and token ID.",
          "route": "/nft/:address/:token_id/trades",
          "hasTests": true
        },
        "/wallets/:address/nfts/trades": {
          "requestMethod": "GET",
          "description": "Get trades of NFTs for a given wallet.",
          "route": "/wallets/:address/nfts/trades",
          "hasTests": true
        },
        "/nft/:address/trades": {
          "requestMethod": "GET",
          "description": "Get trades of NFTs for a given contract and marketplace.",
          "route": "/nft/:address/trades",
          "hasTests": true
        },
        "/nft/:address/traits/paginate": {
          "requestMethod": "GET",
          "description": "Get NFT traits for a given collection",
          "route": "/nft/:address/traits/paginate",
          "hasTests": true
        },
        "/nft/:address/traits": {
          "requestMethod": "GET",
          "description": "Get NFT traits for a given collection",
          "route": "/nft/:address/traits",
          "hasTests": true
        },
        "/nft/:address/:token_id/transfers": {
          "requestMethod": "GET",
          "description": "Get transfers of an NFT given a contract address and token ID.",
          "route": "/nft/:address/:token_id/transfers",
          "hasTests": true
        },
        "/:address/nft/collections": {
          "requestMethod": "GET",
          "description": "Get NFT collections owned by a given wallet address.",
          "route": "/:address/nft/collections",
          "hasTests": true
        },
        "/:address/nft/transfers": {
          "requestMethod": "GET",
          "description": "Get transfers of NFTs given the wallet and other parameters.",
          "route": "/:address/nft/transfers",
          "hasTests": true
        },
        "/:address/nft": {
          "requestMethod": "GET",
          "description": "Get NFTs owned by a given address.",
          "route": "/:address/nft",
          "hasTests": true
        },
        "/nft/:address/:token_id/metadata/resync": {
          "requestMethod": "GET",
          "description": "Resync the metadata for an NFT",
          "route": "/nft/:address/:token_id/metadata/resync",
          "hasTests": true
        },
        "/nft/:address/traits/resync": {
          "requestMethod": "GET",
          "description": "Resync the NFT Trait for a given contract",
          "route": "/nft/:address/traits/resync",
          "hasTests": true
        }
      },
      "routeCount": 20
    },
    {
      "namespace": "moralis",
      "name": "Moralis priceApi API",
      "description": "Moralis priceApi API",
      "tags": [],
      "docs": [
        "https://docs.moralis.com"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [
        "MORALIS_API_KEY"
      ],
      "hasApiKey": true,
      "path": "eth/priceApi.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/eth/priceApi.mjs",
      "routes": {
        "/nft/:address/price": {
          "requestMethod": "GET",
          "description": "Get the sold price for an NFT contract for the last x days (only trades paid in ETH).",
          "route": "/nft/:address/price",
          "hasTests": true
        },
        "/nft/:address/floor-price": {
          "requestMethod": "GET",
          "description": "Get floor price for a given contract.",
          "route": "/nft/:address/floor-price",
          "hasTests": true
        },
        "/nft/:address/:token_id/floor-price": {
          "requestMethod": "GET",
          "description": "Get floor price for a given token.",
          "route": "/nft/:address/:token_id/floor-price",
          "hasTests": true
        },
        "/nft/:address/floor-price/historical": {
          "requestMethod": "GET",
          "description": "Get historical floor price for a given contract.",
          "route": "/nft/:address/floor-price/historical",
          "hasTests": true
        },
        "/nft/:address/:token_id/price": {
          "requestMethod": "GET",
          "description": "Get the sold price for an NFT token for the last x days (only trades paid in ETH).",
          "route": "/nft/:address/:token_id/price",
          "hasTests": true
        },
        "/pairs/:address/ohlcv": {
          "requestMethod": "GET",
          "description": "Get the OHLCV candle stick by using pair address",
          "route": "/pairs/:address/ohlcv",
          "hasTests": true
        },
        "/erc20/:address/price": {
          "requestMethod": "GET",
          "description": "Get the token price denominated in the blockchain's native token and USD. View supported exchanges here",
          "route": "/erc20/:address/price",
          "hasTests": true
        }
      },
      "routeCount": 7
    },
    {
      "namespace": "moralis",
      "name": "Moralis tokenApi API",
      "description": "Moralis tokenApi API",
      "tags": [],
      "docs": [
        "https://docs.moralis.com"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [
        "MORALIS_API_KEY"
      ],
      "hasApiKey": true,
      "path": "eth/tokenApi.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/eth/tokenApi.mjs",
      "routes": {
        "/:pair_address/reserves": {
          "requestMethod": "GET",
          "description": "Get the liquidity reserves for a given pair address. Only Uniswap V2 based exchanges supported at the moment.",
          "route": "/:pair_address/reserves",
          "hasTests": true
        },
        "/pairs/:address/snipers": {
          "requestMethod": "GET",
          "description": "Get all snipers (wallets that quickly buy and sell tokens) for a specific token pair address.",
          "route": "/pairs/:address/snipers",
          "hasTests": true
        },
        "/pairs/:address/swaps": {
          "requestMethod": "GET",
          "description": "Get all swap related transactions (buy, sell, add liquidity & remove liquidity)",
          "route": "/pairs/:address/swaps",
          "hasTests": true
        },
        "/wallets/:address/swaps": {
          "requestMethod": "GET",
          "description": "Get all swap related transactions (buy, sell)",
          "route": "/wallets/:address/swaps",
          "hasTests": true
        },
        "/tokens/:address/analytics": {
          "requestMethod": "GET",
          "description": "Get analytics for a token by token address",
          "route": "/tokens/:address/analytics",
          "hasTests": true
        },
        "/erc20/:token_address/owners": {
          "requestMethod": "GET",
          "description": "Identify the major holders of an ERC20 token and understand their ownership percentages",
          "route": "/erc20/:token_address/owners",
          "hasTests": true
        },
        "/erc20/metadata/symbols": {
          "requestMethod": "GET",
          "description": "Get the metadata for a list of token symbols (name, symbol, decimals, logo).",
          "route": "/erc20/metadata/symbols",
          "hasTests": true
        },
        "/erc20/metadata": {
          "requestMethod": "GET",
          "description": "Get the metadata for a given token contract address (name, symbol, decimals, logo).",
          "route": "/erc20/metadata",
          "hasTests": true
        },
        "/erc20/:address/stats": {
          "requestMethod": "GET",
          "description": "Get the stats for a erc20 token",
          "route": "/erc20/:address/stats",
          "hasTests": true
        },
        "/erc20/:address/transfers": {
          "requestMethod": "GET",
          "description": "Get ERC20 token transactions from a contract ordered by block number in descending order.",
          "route": "/erc20/:address/transfers",
          "hasTests": true
        },
        "/market-data/erc20s/top-tokens": {
          "requestMethod": "GET",
          "description": "Get the top ERC20 tokens by market cap",
          "route": "/market-data/erc20s/top-tokens",
          "hasTests": true
        },
        "/erc20/:address/top-gainers": {
          "requestMethod": "GET",
          "description": "Retrieves a list of the top profitable wallets for a specific ERC20 token.",
          "route": "/erc20/:address/top-gainers",
          "hasTests": true
        },
        "/wallets/:address/approvals": {
          "requestMethod": "GET",
          "description": "Retrieve active ERC20 token approvals for the specified wallet address",
          "route": "/wallets/:address/approvals",
          "hasTests": true
        },
        "/wallets/:address/tokens": {
          "requestMethod": "GET",
          "description": "Get token balances for a specific wallet address and their token prices in USD.",
          "route": "/wallets/:address/tokens",
          "hasTests": true
        },
        "/:address/erc20": {
          "requestMethod": "GET",
          "description": "Get token balances for a specific wallet address.",
          "route": "/:address/erc20",
          "hasTests": true
        },
        "/:address/erc20/transfers": {
          "requestMethod": "GET",
          "description": "Get ERC20 token transactions ordered by block number in descending order.",
          "route": "/:address/erc20/transfers",
          "hasTests": true
        }
      },
      "routeCount": 16
    },
    {
      "namespace": "moralis",
      "name": "Moralis utils API",
      "description": "Moralis utils API",
      "tags": [],
      "docs": [
        "https://docs.moralis.com"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [
        "MORALIS_API_KEY"
      ],
      "hasApiKey": true,
      "path": "eth/utils.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/eth/utils.mjs",
      "routes": {
        "/info/endpointWeights": {
          "requestMethod": "GET",
          "description": "Get the cost and rate limit for each API endpoint.",
          "route": "/info/endpointWeights",
          "hasTests": true
        },
        "/web3/version": {
          "requestMethod": "GET",
          "description": "Get the current version of the Moralis Web3 API.",
          "route": "/web3/version",
          "hasTests": true
        }
      },
      "routeCount": 2
    },
    {
      "namespace": "moralis",
      "name": "Moralis walletApi API",
      "description": "Moralis walletApi API",
      "tags": [],
      "docs": [
        "https://docs.moralis.com"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [
        "MORALIS_API_KEY"
      ],
      "hasApiKey": true,
      "path": "eth/walletApi.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/eth/walletApi.mjs",
      "routes": {
        "/wallets/:address/chains": {
          "requestMethod": "GET",
          "description": "Get the active chains for a wallet address.",
          "route": "/wallets/:address/chains",
          "hasTests": true
        },
        "/:address/balance": {
          "requestMethod": "GET",
          "description": "Get the native balance for a specific wallet address.",
          "route": "/:address/balance",
          "hasTests": true
        },
        "/wallets/:address/history": {
          "requestMethod": "GET",
          "description": "Retrieve the full transaction history of a specified wallet address, including sends, receives, token and NFT transfers, and contract interactions.",
          "route": "/wallets/:address/history",
          "hasTests": true
        },
        "/wallets/:address/net-worth": {
          "requestMethod": "GET",
          "description": "Get the net worth of a wallet in USD. We recommend to filter out spam tokens and unverified contracts to get a more accurate result.",
          "route": "/wallets/:address/net-worth",
          "hasTests": true
        },
        "/wallets/:address/profitability/summary": {
          "requestMethod": "GET",
          "description": "Retrieves a summary of wallet profitability based on specified parameters including optional token addresses.",
          "route": "/wallets/:address/profitability/summary",
          "hasTests": true
        },
        "/wallets/:address/profitability": {
          "requestMethod": "GET",
          "description": "Retrieves profitability information for a specific wallet address. Can be filtered by one or more tokens.",
          "route": "/wallets/:address/profitability",
          "hasTests": true
        },
        "/wallets/:address/stats": {
          "requestMethod": "GET",
          "description": "Get the stats for a wallet address.",
          "route": "/wallets/:address/stats",
          "hasTests": true
        },
        "/resolve/:address/domain": {
          "requestMethod": "GET",
          "description": "Resolve a specific address to its Unstoppable domain",
          "route": "/resolve/:address/domain",
          "hasTests": true
        },
        "/resolve/:address/reverse": {
          "requestMethod": "GET",
          "description": "Reverse resolve a given ETH address to its ENS domain.",
          "route": "/resolve/:address/reverse",
          "hasTests": true
        },
        "/resolve/:domain": {
          "requestMethod": "GET",
          "description": "Resolve a specific Unstoppable domain to its address.",
          "route": "/resolve/:domain",
          "hasTests": true
        },
        "/resolve/ens/:domain": {
          "requestMethod": "GET",
          "description": "Resolve a specific ENS domain to its address.",
          "route": "/resolve/ens/:domain",
          "hasTests": true
        }
      },
      "routeCount": 11
    },
    {
      "namespace": "newsapi",
      "name": "NewsAPI.org",
      "description": "Access breaking news headlines and search through articles from news sources and blogs across the web",
      "tags": [
        "news",
        "media",
        "content"
      ],
      "docs": [
        "https://newsapi.org/docs"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [
        "NEWSAPI_API_KEY"
      ],
      "hasApiKey": true,
      "path": "newsapi-org/news.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/newsapi-org/news.mjs",
      "routes": {
        "getTopHeadlines": {
          "requestMethod": "GET",
          "description": "Get breaking news headlines for a country or category",
          "route": "/top-headlines",
          "hasTests": true
        },
        "getEverything": {
          "requestMethod": "GET",
          "description": "Search through millions of articles from over 80,000 large and small news sources and blogs",
          "route": "/everything",
          "hasTests": true
        },
        "getSources": {
          "requestMethod": "GET",
          "description": "Get the subset of news publishers that top headlines and everything endpoints are available for",
          "route": "/top-headlines/sources",
          "hasTests": true
        }
      },
      "routeCount": 3
    },
    {
      "namespace": "newsdata",
      "name": "CryptoNews",
      "description": "Fetches general or topic-specific cryptocurrency news articles from NewsData.io.",
      "tags": [],
      "docs": [
        "https://newsdata.io/documentation/"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [
        "NEWSDATA_API_KEY"
      ],
      "hasApiKey": true,
      "path": "newsdata-io/getNews.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/newsdata-io/getNews.mjs",
      "routes": {
        "getLatestNewsdata": {
          "requestMethod": "GET",
          "description": "Fetch the latest general crypto news from NewsData.io.",
          "route": "/",
          "hasTests": true
        },
        "getCryptoNewsdata": {
          "requestMethod": "GET",
          "description": "Fetch topic-specific crypto news for a given query and max number of pages.",
          "route": "/",
          "hasTests": true
        }
      },
      "routeCount": 2
    },
    {
      "namespace": "ohlcv",
      "name": "Moralis Recursive OHLCV EVM and Ethereum",
      "description": "Recursively fetches OHLCV data from Moralis for EVM token pairs.",
      "tags": [],
      "docs": [
        "https://docs.moralis.io/web3-data-api/evm/reference/get-ohlcv-by-pair-address"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [
        "MORALIS_API_KEY"
      ],
      "hasApiKey": true,
      "path": "ohlcv/olhcv-moralis-evm.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/ohlcv/olhcv-moralis-evm.mjs",
      "routes": {
        "getRecursiveOhlcvEVM": {
          "requestMethod": "GET",
          "description": "Fetch OHLCV data recursively until max length or iteration limit is reached.",
          "route": "/api/v2.2/pairs/{{pairAddress}}/ohlcv",
          "hasTests": true
        }
      },
      "routeCount": 1
    },
    {
      "namespace": "ohlcv",
      "name": "Moralis Recursive OHLCV Solana",
      "description": "Recursively fetches OHLCV data from Moralis for Solana token pairs.",
      "tags": [],
      "docs": [
        "https://docs.moralis.io/web3-data-api/solana/reference/get-ohlcv-by-pair-address"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [
        "MORALIS_API_KEY"
      ],
      "hasApiKey": true,
      "path": "ohlcv/olhcv-moralis-solana.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/ohlcv/olhcv-moralis-solana.mjs",
      "routes": {
        "getRecursiveOhlcvSolana": {
          "requestMethod": "GET",
          "description": "Fetch OHLCV data recursively until max length or iteration limit is reached.",
          "route": "/",
          "hasTests": true
        }
      },
      "routeCount": 1
    },
    {
      "namespace": "ohlcv",
      "name": "Solana Tracker OHLCV for Solana",
      "description": "Retrieves OHLCV chart data from Solana Tracker API for a given token and pool.",
      "tags": [],
      "docs": [
        "https://data.solanatracker.io"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [
        "SOLANA_TRACKER_API_KEY"
      ],
      "hasApiKey": true,
      "path": "ohlcv/olhcv-solana-tracker.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/ohlcv/olhcv-solana-tracker.mjs",
      "routes": {
        "getOhlcvSolana": {
          "requestMethod": "GET",
          "description": "Fetch OHLCV chart data for a specific token and pool on Solana.",
          "route": "/chart/:token/:pool",
          "hasTests": true
        }
      },
      "routeCount": 1
    },
    {
      "namespace": "passportOnchain",
      "name": "Passport On-Chain Data API",
      "description": "Access Passport scores, credentials, and attestations directly from smart contracts on Ethereum and Arbitrum",
      "tags": [
        "identity",
        "attestation",
        "gitcoin"
      ],
      "docs": [
        "https://docs.passport.xyz/building-with-passport/stamps/smart-contracts/contract-reference"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [
        "ETHEREUM_MAINNET_ALCHEMY_HTTP",
        "ARBITRUM_MAINNET_ALCHEMY_HTTP"
      ],
      "hasApiKey": true,
      "path": "passport-xyz/onchain-data.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/passport-xyz/onchain-data.mjs",
      "routes": {
        "getFullPassportData": {
          "requestMethod": "GET",
          "description": "Get complete Passport data (score, credentials, humanity status) for an address across all networks using multicall",
          "route": "/",
          "hasTests": true
        }
      },
      "routeCount": 1
    },
    {
      "namespace": "pinata",
      "name": "Pinata IPFS Read MCP Interface",
      "description": "A FlowMCP interface for reading content from the Pinata IPFS gateway",
      "tags": [],
      "docs": [
        "https://gateway.pinata.cloud/"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "pinata/read.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/pinata/read.mjs",
      "routes": {
        "free_read_example": {
          "requestMethod": "GET",
          "description": "Returns a static IPFS-hosted example image",
          "route": "/{{cid}}",
          "hasTests": true
        },
        "free_read_cid": {
          "requestMethod": "GET",
          "description": "Reads content from any IPFS CID",
          "route": "/{{cid}}",
          "hasTests": true
        }
      },
      "routeCount": 2
    },
    {
      "namespace": "pinata",
      "name": "Pinata SDK Upload",
      "description": "Uploads a text file to IPFS using the new Pinata SDK and File object",
      "tags": [],
      "docs": [
        "https://docs.pinata.cloud/sdk-pinning/pinata-upload"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [
        "PINATA_JWT",
        "PINATA_GATEWAY"
      ],
      "hasApiKey": true,
      "path": "pinata/write.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/pinata/write.mjs",
      "routes": {
        "upload_text_file": {
          "requestMethod": "POST",
          "description": "Uploads a plain text file to IPFS using the new Pinata SDK",
          "route": "/sdk/upload",
          "hasTests": true
        }
      },
      "routeCount": 1
    },
    {
      "namespace": "poap",
      "name": "POAP GraphQL",
      "description": "GraphQL endpoint for accessing POAP event data and metadata",
      "tags": [
        "production",
        "graphql",
        "poap"
      ],
      "docs": [
        "https://public.compass.poap.tech/v1/graphql"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "poap/graphql.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/poap/graphql.mjs",
      "routes": {
        "getTypename": {
          "requestMethod": "POST",
          "description": "Simple GraphQL query to retrieve the __typename root for basic connectivity test.",
          "route": "/",
          "hasTests": true
        },
        "getSchemaDefinition": {
          "requestMethod": "POST",
          "description": "Returns the full GraphQL schema via introspection",
          "route": "/",
          "hasTests": true
        },
        "getPredefinedQueryList": {
          "requestMethod": "GET",
          "description": "Run a predefined GraphQL query.",
          "route": "/",
          "hasTests": true
        },
        "executePrefinedQuery": {
          "requestMethod": "POST",
          "description": "Run a predefined GraphQL query.",
          "route": "/",
          "hasTests": true
        },
        "querySubgraph": {
          "requestMethod": "POST",
          "description": "Run a raw GraphQL query.",
          "route": "/",
          "hasTests": true
        }
      },
      "routeCount": 5
    },
    {
      "namespace": "polymarket",
      "name": "Polymarket Predictions",
      "description": "Access prediction market data from Polymarket via CLOB API",
      "tags": [],
      "docs": [],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "polymarket/marketInfo.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/polymarket/marketInfo.mjs",
      "routes": {
        "getMarkets": {
          "requestMethod": "GET",
          "description": "List prediction markets with optional filters",
          "route": "/markets",
          "hasTests": true
        },
        "getMarketInfo": {
          "requestMethod": "GET",
          "description": "Get detailed information about a specific prediction market",
          "route": "/markets/:condition_id",
          "hasTests": true
        }
      },
      "routeCount": 2
    },
    {
      "namespace": "polymarket",
      "name": "Fed Rate Cuts 2025",
      "description": "Zeigt Marktprognosen für Fed-Zinssenkungen im Jahr 2025.",
      "tags": [],
      "docs": [
        "https://polymarket.com"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "polymarket/searchBySlug.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/polymarket/searchBySlug.mjs",
      "routes": {
        "searchBySlug": {
          "requestMethod": "GET",
          "description": "Get market data for Fed rate cuts in 2025 by slug",
          "route": "/events/slug/:slug",
          "hasTests": true
        }
      },
      "routeCount": 1
    },
    {
      "namespace": "profilejump",
      "name": "ProfileJump",
      "description": "Schema for interacting with the ProfileJump API",
      "tags": [],
      "docs": [
        "https://profilejump.com"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "erc725/profileJump.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/erc725/profileJump.mjs",
      "routes": {
        "prices": {
          "requestMethod": "GET",
          "description": "Fetch price data",
          "route": "/api/prices",
          "hasTests": true
        },
        "hotProfiles": {
          "requestMethod": "GET",
          "description": "Fetch hot profiles",
          "route": "/api/profiles/hot-profiles",
          "hasTests": true
        },
        "tokensList": {
          "requestMethod": "GET",
          "description": "Fetch list of tokens with pagination",
          "route": "/api/tokens-list",
          "hasTests": true
        },
        "profilesList": {
          "requestMethod": "GET",
          "description": "Fetch list of profiles filtered by view",
          "route": "/api/profiles-list",
          "hasTests": true
        },
        "profileByAddress": {
          "requestMethod": "GET",
          "description": "Fetch profile details by wallet address",
          "route": "/api/profiles/:address",
          "hasTests": true
        }
      },
      "routeCount": 5
    },
    {
      "namespace": "redditScanner",
      "name": "Reddit Token Mention Search",
      "description": "Searches Reddit for mentions of a token symbol or name related to crypto topics.",
      "tags": [],
      "docs": [
        "https://www.reddit.com/dev/api/"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "reddit/getTokenMentions.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/reddit/getTokenMentions.mjs",
      "routes": {
        "getTokenMentions": {
          "requestMethod": "GET",
          "description": "Search for mentions of a token symbol or name on Reddit with optional sentiment analysis.",
          "route": "/search.json",
          "hasTests": true
        },
        "getHotMemes": {
          "requestMethod": "GET",
          "description": "Retrieve hot posts from r/memes subreddit.",
          "route": "/r/memes/hot/.json",
          "hasTests": true
        }
      },
      "routeCount": 2
    },
    {
      "namespace": "santiment",
      "name": "SantimentAnalytics",
      "description": "Provides sentiment and social metrics for crypto assets using the Santiment API.",
      "tags": [],
      "docs": [
        "https://academy.santiment.net/for-developers/"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [
        "SANTIMENT_API_KEY"
      ],
      "hasApiKey": true,
      "path": "santiment-net/schema.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/santiment-net/schema.mjs",
      "routes": {
        "get_sentiment_balance": {
          "requestMethod": "POST",
          "description": "Get average sentiment balance for a crypto asset over a specified number of days.",
          "route": "/graphql",
          "hasTests": true
        },
        "get_social_volume": {
          "requestMethod": "POST",
          "description": "Get total social media volume for a crypto asset.",
          "route": "/graphql",
          "hasTests": true
        },
        "alert_social_shift": {
          "requestMethod": "POST",
          "description": "Detect significant changes in social media volume for a crypto asset.",
          "route": "/graphql",
          "hasTests": true
        },
        "get_trending_words": {
          "requestMethod": "POST",
          "description": "Retrieve top trending words in crypto discussions.",
          "route": "/graphql",
          "hasTests": true
        },
        "get_social_dominance": {
          "requestMethod": "POST",
          "description": "Get average social dominance for a crypto asset.",
          "route": "/graphql",
          "hasTests": true
        }
      },
      "routeCount": 5
    },
    {
      "namespace": "simdune",
      "name": "Sim by Dune - Token Info",
      "description": "Fetches token metadata like name, symbol, supply, decimals and USD price for a given contract address on a supported chain.",
      "tags": [
        "production",
        "token",
        "sei",
        "analytics"
      ],
      "docs": [
        "https://docs.sim.dune.com/docs/sim-api/token-info"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [
        "DUNE_SIM_API_KEY"
      ],
      "hasApiKey": true,
      "path": "simdune/sei-token-info.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/simdune/sei-token-info.mjs",
      "routes": {
        "getTokenInfo": {
          "requestMethod": "GET",
          "description": "Returns metadata for a specific token contract on a given chain (e.g. USDC on Sei).",
          "route": "/evm/token-info/{{token}}",
          "hasTests": true
        }
      },
      "routeCount": 1
    },
    {
      "namespace": "snapshot",
      "name": "Snapshot DAO Proposals",
      "description": "Query Snapshot GraphQL API to retrieve DAO spaces and proposals",
      "tags": [
        "dao",
        "governance",
        "voting"
      ],
      "docs": [
        "https://docs.snapshot.org/"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "snapshot/snapshot.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/snapshot/snapshot.mjs",
      "routes": {
        "listSpaces": {
          "requestMethod": "POST",
          "description": "Fetch a list of available Snapshot spaces",
          "route": "/",
          "hasTests": true
        },
        "listProposals": {
          "requestMethod": "POST",
          "description": "Fetch recent proposals for a given Snapshot space",
          "route": "/",
          "hasTests": true
        },
        "getProposalDetails": {
          "requestMethod": "POST",
          "description": "Fetch detailed information for a specific proposal",
          "route": "/",
          "hasTests": true
        }
      },
      "routeCount": 3
    },
    {
      "namespace": "solanatracker",
      "name": "TokenStatsAPI",
      "description": "Provides detailed statistics for tokens and token-pool pairs over multiple time intervals.",
      "tags": [],
      "docs": [
        "https://docs.solanatracker.io"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [
        "SOLANA_TRACKER_API_KEY"
      ],
      "hasApiKey": true,
      "path": "solanatracker-io/--additionalRoutes.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/solanatracker-io/--additionalRoutes.mjs",
      "routes": {
        "tokenStats": {
          "requestMethod": "GET",
          "description": "Get detailed stats for a token over various time intervals.",
          "route": "/stats/:token",
          "hasTests": true
        },
        "tokenStatsByPool": {
          "requestMethod": "GET",
          "description": "Get detailed stats for a token-pool pair over various time intervals.",
          "route": "/stats/:token/:pool",
          "hasTests": true
        }
      },
      "routeCount": 2
    },
    {
      "namespace": "solanatracker",
      "name": "TokenChartAPI",
      "description": "Schema for accessing OHLCV and holder chart data for specific tokens and pools.",
      "tags": [],
      "docs": [
        "https://docs.solanatracker.io"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [
        "SOLANA_TRACKER_API_KEY"
      ],
      "hasApiKey": true,
      "path": "solanatracker-io/--chartRoutes.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/solanatracker-io/--chartRoutes.mjs",
      "routes": {
        "chartData": {
          "requestMethod": "GET",
          "description": "Get OHLCV (Open, High, Low, Close, Volume) chart data for a token.",
          "route": "/chart/:token",
          "hasTests": true
        },
        "chartDataByPool": {
          "requestMethod": "GET",
          "description": "Get OHLCV chart data for a specific token in a specific pool.",
          "route": "/chart/:token/:pool",
          "hasTests": true
        }
      },
      "routeCount": 2
    },
    {
      "namespace": "solanatracker",
      "name": "PnL Analytics API",
      "description": "API to retrieve profit and loss data for wallets and tokens on-chain.",
      "tags": [],
      "docs": [
        "https://docs.solanatracker.io"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [
        "SOLANA_TRACKER_API_KEY"
      ],
      "hasApiKey": true,
      "path": "solanatracker-io/--pnlRoutes.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/solanatracker-io/--pnlRoutes.mjs",
      "routes": {
        "profitAndLossData": {
          "requestMethod": "GET",
          "description": "Get Profit and Loss data for all positions of a wallet.",
          "route": "/pnl/:wallet",
          "hasTests": true
        },
        "pnlForSpecificToken": {
          "requestMethod": "GET",
          "description": "Get Profit and Loss data for a specific token in a wallet.",
          "route": "/pnl/:wallet/:token",
          "hasTests": true
        },
        "firstBuyers": {
          "requestMethod": "GET",
          "description": "Get the first 100 buyers of a token, with full PnL breakdown per wallet.",
          "route": "/first-buyers/:token",
          "hasTests": true
        }
      },
      "routeCount": 3
    },
    {
      "namespace": "solanatracker",
      "name": "TokenPriceAPI",
      "description": "Provides real-time and historical token price information",
      "tags": [],
      "docs": [
        "https://docs.solanatracker.io"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [
        "SOLANA_TRACKER_API_KEY"
      ],
      "hasApiKey": true,
      "path": "solanatracker-io/--priceEndpoints.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/solanatracker-io/--priceEndpoints.mjs",
      "routes": {
        "priceInformation": {
          "requestMethod": "GET",
          "description": "Get price information for a single token.",
          "route": "/price",
          "hasTests": true
        },
        "postPrice": {
          "requestMethod": "POST",
          "description": "Similar to GET /price, but accepts token address in the request body.",
          "route": "/price",
          "hasTests": true
        },
        "multiPriceInformation": {
          "requestMethod": "GET",
          "description": "Get price information for multiple tokens (up to 100).",
          "route": "/price/multi",
          "hasTests": true
        },
        "getHistoricPrice": {
          "requestMethod": "GET",
          "description": "Get historic price points for a token (3d, 5d, 7d, 14d, 30d).",
          "route": "/price/history",
          "hasTests": true
        },
        "getPriceAtTimestamp": {
          "requestMethod": "GET",
          "description": "Get price at a specific timestamp for a token.",
          "route": "/price/history/timestamp",
          "hasTests": true
        },
        "getPriceRange": {
          "requestMethod": "GET",
          "description": "Get lowest and highest prices for a token within a time range.",
          "route": "/price/history/range",
          "hasTests": true
        },
        "postMultiPrice": {
          "requestMethod": "POST",
          "description": "Get price info for multiple tokens (POST version).",
          "route": "/price/multi",
          "hasTests": true
        }
      },
      "routeCount": 7
    },
    {
      "namespace": "solanatracker",
      "name": "TokenAPI",
      "description": "Provides endpoints for retrieving information about tokens, their holders, search capabilities, and statistical metrics like volume and trending status.",
      "tags": [],
      "docs": [
        "https://docs.solanatracker.io"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [
        "SOLANA_TRACKER_API_KEY"
      ],
      "hasApiKey": true,
      "path": "solanatracker-io/--tokenEndpoints.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/solanatracker-io/--tokenEndpoints.mjs",
      "routes": {
        "tokenInformation": {
          "requestMethod": "GET",
          "description": "Retrieve all information for a specific token.",
          "route": "/tokens/:tokenAddress",
          "hasTests": true
        },
        "tokenHolders": {
          "requestMethod": "GET",
          "description": "Get the top 100 holders for a specific token.",
          "route": "/tokens/:tokenAddress/holders",
          "hasTests": true
        },
        "topTokenHolders": {
          "requestMethod": "GET",
          "description": "Get top 20 token holders",
          "route": "/tokens/:tokenAddress/holders/top",
          "hasTests": true
        },
        "allTimeHighPrice": {
          "requestMethod": "GET",
          "description": "Get all-time high price of a token",
          "route": "/tokens/:tokenAddress/ath",
          "hasTests": true
        },
        "tokensByDeployer": {
          "requestMethod": "GET",
          "description": "Get all tokens deployed by a specific wallet",
          "route": "/deployer/:wallet",
          "hasTests": true
        },
        "search": {
          "requestMethod": "GET",
          "description": "Advanced token search with filtering and pagination.",
          "route": "/search",
          "hasTests": true
        },
        "latestTokens": {
          "requestMethod": "GET",
          "description": "Retrieve the latest 100 tokens.",
          "route": "/tokens/latest",
          "hasTests": true
        },
        "multipleTokens": {
          "requestMethod": "POST",
          "description": "Get multiple tokens by array of addresses (max 20)",
          "route": "/tokens/multi",
          "hasTests": true
        },
        "trendingTokens": {
          "requestMethod": "GET",
          "description": "Get the top 100 trending tokens based on transaction volume in the past hour.",
          "route": "/tokens/trending",
          "hasTests": true
        },
        "tokensByVolume": {
          "requestMethod": "GET",
          "description": "Get top 100 tokens by volume (default timeframe)",
          "route": "/tokens/volume",
          "hasTests": true
        },
        "tokenOverview": {
          "requestMethod": "GET",
          "description": "Overview of latest, graduating, and graduated tokens",
          "route": "/tokens/multi/all",
          "hasTests": true
        },
        "graduatedTokens": {
          "requestMethod": "GET",
          "description": "Overview of all graduated tokens (Pumpvision/Moonshot)",
          "route": "/tokens/multi/graduated",
          "hasTests": true
        },
        "tokenByPool": {
          "requestMethod": "GET",
          "description": "Get token by pool address.",
          "route": "/tokens/by-pool/:poolAddress",
          "hasTests": true
        },
        "trendingTokensByTimeframe": {
          "requestMethod": "GET",
          "description": "Get trending tokens by specific timeframe (e.g., 5m, 24h).",
          "route": "/tokens/trending/:timeframe",
          "hasTests": true
        },
        "tokensByVolumeTimeframe": {
          "requestMethod": "GET",
          "description": "Get top 100 tokens by volume for a specific timeframe.",
          "route": "/tokens/volume/:timeframe",
          "hasTests": true
        }
      },
      "routeCount": 15
    },
    {
      "namespace": "solanatracker",
      "name": "TopTradersAPI",
      "description": "Provides access to the most profitable traders across all tokens, with support for pagination and token-specific queries.",
      "tags": [],
      "docs": [
        "https://docs.solanatracker.io"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [
        "SOLANA_TRACKER_API_KEY"
      ],
      "hasApiKey": true,
      "path": "solanatracker-io/--topTraderRoutes.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/solanatracker-io/--topTraderRoutes.mjs",
      "routes": {
        "topTradersAll": {
          "requestMethod": "GET",
          "description": "Get the most profitable traders across all tokens.",
          "route": "/top-traders/all",
          "hasTests": true
        },
        "topTradersAllPaged": {
          "requestMethod": "GET",
          "description": "Get the most profitable traders across all tokens, paginated by page number.",
          "route": "/top-traders/all/:page",
          "hasTests": true
        },
        "topTradersByToken": {
          "requestMethod": "GET",
          "description": "Get the top 100 most profitable traders for a specific token.",
          "route": "/top-traders/:token",
          "hasTests": true
        }
      },
      "routeCount": 3
    },
    {
      "namespace": "solanatracker",
      "name": "TokenTradeTracker",
      "description": "API zur Ermittlung von Handelsdaten für Token, Pools und Wallets.",
      "tags": [],
      "docs": [
        "https://docs.solanatracker.io"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [
        "SOLANA_TRACKER_API_KEY"
      ],
      "hasApiKey": true,
      "path": "solanatracker-io/--tradeEndpoints.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/solanatracker-io/--tradeEndpoints.mjs",
      "routes": {
        "tokenTrades": {
          "requestMethod": "GET",
          "description": "Get the latest trades for a token across all pools.",
          "route": "/trades/:tokenAddress",
          "hasTests": true
        },
        "tradesByWallet": {
          "requestMethod": "GET",
          "description": "Get the latest trades for a specific token and wallet address.",
          "route": "/trades/:tokenAddress/by-wallet/:owner",
          "hasTests": true
        },
        "tokenPoolTrades": {
          "requestMethod": "GET",
          "description": "Get the latest trades for a specific token and pool.",
          "route": "/trades/:tokenAddress/:poolAddress",
          "hasTests": true
        },
        "userPoolTrades": {
          "requestMethod": "GET",
          "description": "Get the latest trades for a specific token, pool, and user.",
          "route": "/trades/:tokenAddress/:poolAddress/:owner",
          "hasTests": true
        }
      },
      "routeCount": 4
    },
    {
      "namespace": "solanatracker",
      "name": "WalletExplorer",
      "description": "API zur Abfrage von Token-Balances und Handelsdaten für Wallets.",
      "tags": [],
      "docs": [
        "https://docs.solanatracker.io"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [
        "SOLANA_TRACKER_API_KEY"
      ],
      "hasApiKey": true,
      "path": "solanatracker-io/--walletEndpoints.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/solanatracker-io/--walletEndpoints.mjs",
      "routes": {
        "walletInformation": {
          "requestMethod": "GET",
          "description": "Get all tokens in a wallet with current value in USD.",
          "route": "/wallet/:owner",
          "hasTests": true
        },
        "walletTokensBasic": {
          "requestMethod": "GET",
          "description": "Lightweight version: token balances and values without full metadata.",
          "route": "/wallet/:owner/basic",
          "hasTests": true
        },
        "walletTokensPaged": {
          "requestMethod": "GET",
          "description": "Paginated version: fetch wallet tokens page by page (250 per page).",
          "route": "/wallet/:owner/page/:page",
          "hasTests": true
        },
        "walletTrades": {
          "requestMethod": "GET",
          "description": "Get the latest trades of a wallet.",
          "route": "/wallet/:owner/trades",
          "hasTests": true
        }
      },
      "routeCount": 4
    },
    {
      "namespace": "solscan",
      "name": "SolscanChainInfo",
      "description": "Fetches general blockchain information from Solana via Solscan public API.",
      "tags": [],
      "docs": [
        "https://docs.solscan.io/api-access/pro-api-endpoints"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [
        "SOLSCAN_API_KEY"
      ],
      "hasApiKey": true,
      "path": "solscan-io/getChainInfo.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/solscan-io/getChainInfo.mjs",
      "routes": {
        "chainInfo": {
          "requestMethod": "GET",
          "description": "Returns Solana blockchain information such as block height and transaction count.",
          "route": "/chaininfo",
          "hasTests": true
        }
      },
      "routeCount": 1
    },
    {
      "namespace": "solsniffer",
      "name": "SolSniffer",
      "description": "Analyzes Solana tokens using the Solsniffer API to assess risks and metadata.",
      "tags": [],
      "docs": [
        "https://solsniffer.gitbook.io/solsniffer-user-guide"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [
        "SOLSNIFFER_API_KEY"
      ],
      "hasApiKey": true,
      "path": "solsniffer-com/analysis.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/solsniffer-com/analysis.mjs",
      "routes": {
        "analysisToken": {
          "requestMethod": "GET",
          "description": "Analyze a Solana token using its address and return risk and token metadata.",
          "route": "/:token_address",
          "hasTests": true
        }
      },
      "routeCount": 1
    },
    {
      "namespace": "spaceid",
      "name": "SPACE ID Web3 Name API",
      "description": "Resolve crypto addresses and domain names via SPACE ID's on-chain resolution API.",
      "tags": [
        "production",
        "domain",
        "identity",
        "blockchain"
      ],
      "docs": [
        "https://nameapi.space.id",
        "https://space.id",
        "https://docs.space.id"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "spaceid/spaceid.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/spaceid/spaceid.mjs",
      "routes": {
        "getSupportedChains": {
          "requestMethod": "GET",
          "description": "List supported chains and their domain suffixes (static, compiled from docs).",
          "route": "/",
          "hasTests": true
        },
        "getAddress": {
          "requestMethod": "GET",
          "description": "Resolve domain name to wallet address (e.g. steven.sei → sei1whl4xw...)",
          "route": "/getAddress",
          "hasTests": true
        },
        "getName": {
          "requestMethod": "GET",
          "description": "Resolve wallet address to primary domain name on specified chain",
          "route": "/getName",
          "hasTests": true
        }
      },
      "routeCount": 3
    },
    {
      "namespace": "stolpersteineBerl",
      "name": "Stolpersteine Berlin API",
      "description": "Access information about Stolpersteine (memorial stones) in Berlin commemorating victims of Nazi persecution",
      "tags": [
        "memorial",
        "history",
        "berlin"
      ],
      "docs": [
        "https://www.stolpersteine-berlin.de/",
        "https://www.stolpersteine-berlin.de/de/api"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "stolpersteine-berlin/memorial-stones.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/stolpersteine-berlin/memorial-stones.mjs",
      "routes": {
        "getAllStones": {
          "requestMethod": "GET",
          "description": "Get all Stolpersteine in Berlin",
          "route": "/de/api/json/stolpersteine.json",
          "hasTests": true
        },
        "searchStones": {
          "requestMethod": "GET",
          "description": "Search Stolpersteine by person name, address, or other criteria",
          "route": "/de/api/json/stolpersteine.json",
          "hasTests": true
        },
        "getStonesByDistrict": {
          "requestMethod": "GET",
          "description": "Get Stolpersteine in specific Berlin districts",
          "route": "/de/api/json/stolpersteine.json",
          "hasTests": true
        },
        "getStonesByPerson": {
          "requestMethod": "GET",
          "description": "Get detailed information about specific victims commemorated by Stolpersteine",
          "route": "/de/api/json/stolpersteine.json",
          "hasTests": true
        },
        "getStonesByLocation": {
          "requestMethod": "GET",
          "description": "Get Stolpersteine near a specific location or coordinates",
          "route": "/de/api/json/stolpersteine.json",
          "hasTests": true
        }
      },
      "routeCount": 5
    },
    {
      "namespace": "swaggerhub",
      "name": "SwaggerHub API",
      "description": "FlowMCP interface for SwaggerHub registry API, supporting search, metadata listing, and Swagger definition retrieval.",
      "tags": [
        "production",
        "api",
        "documentation",
        "registry"
      ],
      "docs": [
        "https://swaggerhub.com/api/swagger-hub/registry-api/1.0.0"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "swaggerhub-com/api-registry.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/swaggerhub-com/api-registry.mjs",
      "routes": {
        "searchApis": {
          "requestMethod": "GET",
          "description": "Searches SwaggerHub public APIs using query parameters like `query`, `state`, `tag`, etc.",
          "route": "/",
          "hasTests": true
        },
        "listApiVersions": {
          "requestMethod": "GET",
          "description": "Returns metadata for all versions of a specified API.",
          "route": "/:owner/:api",
          "hasTests": true
        }
      },
      "routeCount": 2
    },
    {
      "namespace": "thegraph",
      "name": "UniswapPools",
      "description": "Fetches recently created Uniswap V3 trading pools across multiple blockchains.",
      "tags": [],
      "docs": [
        "https://thegraph.com/docs/en/"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [
        "THEGRAPH_API_KEY"
      ],
      "hasApiKey": true,
      "path": "thegraph/getNewUniswapPools.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/thegraph/getNewUniswapPools.mjs",
      "routes": {
        "getNewPools": {
          "requestMethod": "POST",
          "description": "List new Uniswap V3 pools by chain and order criteria within a time range.",
          "route": "/api/{{THEGRAPH_API_KEY}}/subgraphs/id/--subgraph-id--",
          "hasTests": true
        }
      },
      "routeCount": 1
    },
    {
      "namespace": "thegraph",
      "name": "TheGraphSubgraphTools",
      "description": "Introspect and query The Graph subgraphs.",
      "tags": [],
      "docs": [
        "https://thegraph.com/docs/en/"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [
        "THEGRAPH_API_KEY"
      ],
      "hasApiKey": true,
      "path": "thegraph/getSchema.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/thegraph/getSchema.mjs",
      "routes": {
        "getSubgraphSchema": {
          "requestMethod": "POST",
          "description": "Fetch the schema of a subgraph via introspection query.",
          "route": "/api/{{THEGRAPH_API_KEY}}/subgraphs/id/{{subgraphId}}",
          "hasTests": true
        },
        "querySubgraph": {
          "requestMethod": "POST",
          "description": "Run a raw GraphQL query on a subgraph.",
          "route": "/api/{{THEGRAPH_API_KEY}}/subgraphs/id/{{subgraphId}}",
          "hasTests": true
        }
      },
      "routeCount": 2
    },
    {
      "namespace": "twitter",
      "name": "Twitter Recent Search",
      "description": "Search for Tweets from the last 7 days using Twitter's recent search endpoint",
      "tags": [],
      "docs": [
        "https://developer.twitter.com/en/docs/twitter-api/tweets/search/quick-start/recent-search"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [
        "TWITTER_BEARER_TOKEN"
      ],
      "hasApiKey": true,
      "path": "twitter/search.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/twitter/search.mjs",
      "routes": {
        "searchRecentTweets": {
          "requestMethod": "GET",
          "description": "Search for recent tweets matching a given query",
          "route": "/tweets/search/recent",
          "hasTests": true
        }
      },
      "routeCount": 1
    },
    {
      "namespace": "uniswap",
      "name": "Uniswap Pool Explorer",
      "description": "Query Uniswap V2, V3, and V4 pools for a given token address or pool ID using The Graph subgraphs.",
      "tags": [
        "production"
      ],
      "docs": [
        "https://thegraph.com/explorer/subgraphs?id=A3Np3RQbaBA6oKJgiwDJeo5T3zrYfGHPWFYayMwtNDum",
        "https://thegraph.com/explorer"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [
        "THEGRAPH_API_KEY"
      ],
      "hasApiKey": true,
      "path": "uniswap-pools/uniswap-pool-explorer.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/uniswap-pools/uniswap-pool-explorer.mjs",
      "routes": {
        "getTokenPools": {
          "requestMethod": "POST",
          "description": "Returns Uniswap V3 pools for a given token address using TheGraph subgraph.",
          "route": "/api/{{THEGRAPH_API_KEY}}/subgraphs/id/--subgraph-id--",
          "hasTests": true
        },
        "getPoolData": {
          "requestMethod": "POST",
          "description": "Fetch details for a specific Uniswap pool by ID using TheGraph subgraph.",
          "route": "/api/{{THEGRAPH_API_KEY}}/subgraphs/id/--subgraph-id--",
          "hasTests": true
        }
      },
      "routeCount": 2
    },
    {
      "namespace": "uniswap",
      "name": "Uniswap V3 Price Server",
      "description": "Exposes tools for price discovery via Uniswap V3 pools, with fallback to CryptoCompare",
      "tags": [
        "production",
        "dex",
        "trading",
        "defi"
      ],
      "docs": [
        "https://uniswap.org/docs",
        "https://min-api.cryptocompare.com/documentation"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [
        "ETHEREUM_MAINNET_ALCHEMY_HTTP",
        "POLYGON_MAINNET_ALCHEMY_HTTP",
        "ARBITRUM_MAINNET_ALCHEMY_HTTP",
        "OPTIMISM_MAINNET_ALCHEMY_HTTP"
      ],
      "hasApiKey": true,
      "path": "uniswap-v3/price-discovery.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/uniswap-v3/price-discovery.mjs",
      "routes": {
        "getSupportedChains": {
          "requestMethod": "GET",
          "description": "Returns a Markdown-formatted list of supported chain IDs and names",
          "route": "/",
          "hasTests": true
        },
        "getTokenPrice": {
          "requestMethod": "GET",
          "description": "Fetches the token's USD price from a Uniswap V3 pool (with 0.3% fee tier) on the specified chain, using fallback to CryptoCompare",
          "route": "/",
          "hasTests": true
        }
      },
      "routeCount": 2
    },
    {
      "namespace": "walletInspector",
      "name": "Wallet Inspector",
      "description": "Unified wallet insight interface using Dune SIM APIs for EVM and Solana chains",
      "tags": [
        "production",
        "data",
        "api"
      ],
      "docs": [
        "https://sim.dune.com/docs"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [
        "DUNE_SIM_API_KEY"
      ],
      "hasApiKey": true,
      "path": "sim-dune-com/wallet-inspector.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/sim-dune-com/wallet-inspector.mjs",
      "routes": {
        "getBalance": {
          "requestMethod": "GET",
          "description": "Get token balances for a given EVM or Solana wallet",
          "route": "/balance/:wallet_address",
          "hasTests": true
        },
        "getActivity": {
          "requestMethod": "GET",
          "description": "Get recent activity on EVM chains for a wallet address",
          "route": "/activity/:wallet_address",
          "hasTests": true
        },
        "getTransactions": {
          "requestMethod": "GET",
          "description": "Retrieve transactions for a wallet on EVM or Solana chains",
          "route": "/transactions/:wallet_address",
          "hasTests": true
        },
        "getHoldingsSummary": {
          "requestMethod": "GET",
          "description": "Summarize total holdings in USD by token symbol",
          "route": "/holdings-summary/:wallet_address",
          "hasTests": true
        },
        "getSolBalance": {
          "requestMethod": "GET",
          "description": "Return only SOL balance for Solana address",
          "route": "/sol-balance/:wallet_address",
          "hasTests": true
        },
        "getEvmNativeBalance": {
          "requestMethod": "GET",
          "description": "Return only native EVM balance (ETH, MATIC, etc.)",
          "route": "/evm-native/:wallet_address",
          "hasTests": true
        },
        "getTransactionCount": {
          "requestMethod": "GET",
          "description": "Return number of transactions for wallet",
          "route": "/tx-count/:wallet_address",
          "hasTests": true
        },
        "getChainDistribution": {
          "requestMethod": "GET",
          "description": "Show how many tokens or txs appear on each chain",
          "route": "/chain-distribution/:wallet_address",
          "hasTests": true
        }
      },
      "routeCount": 8
    },
    {
      "namespace": "webcareer",
      "name": "Web3 Career Job API",
      "description": "Query job listings from the web3.career API with optional filters and markdown output.",
      "tags": [
        "production",
        "jobs",
        "career",
        "crypto"
      ],
      "docs": [
        "https://web3.career/developer-api"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [
        "WEB3_CAREER_API_TOKEN"
      ],
      "hasApiKey": true,
      "path": "web3-career/job-listings.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/web3-career/job-listings.mjs",
      "routes": {
        "queryJobs": {
          "requestMethod": "GET",
          "description": "Returns Markdown-formatted job listings filtered by remote, country, tag, and limit.",
          "route": "/",
          "hasTests": true
        }
      },
      "routeCount": 1
    },
    {
      "namespace": "wormholescan",
      "name": "Wormhole Metrics API",
      "description": "Query cross-chain transaction metrics from the Wormholescan public API",
      "tags": [
        "data",
        "api"
      ],
      "docs": [
        "https://wormholescan.io",
        "https://docs.wormholescan.io"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "wormholescan/wormholescan.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/wormholescan/wormholescan.mjs",
      "routes": {
        "getCrossChainActivity": {
          "requestMethod": "GET",
          "description": "Returns cross-chain volume between source and destination chains.",
          "route": "/api/v1/x-chain-activity",
          "hasTests": true
        },
        "getMoneyFlow": {
          "requestMethod": "GET",
          "description": "Returns top money flow data by chain and volume.",
          "route": "/api/v1/x-chain-activity/tops",
          "hasTests": true
        },
        "getTopAssetsByVolume": {
          "requestMethod": "GET",
          "description": "Returns top assets by transfer volume.",
          "route": "/api/v1/top-assets-by-volume",
          "hasTests": true
        },
        "getTopChainPairsByNumTransfers": {
          "requestMethod": "GET",
          "description": "Returns top chain pairs by number of transfers.",
          "route": "/api/v1/top-chain-pairs-by-num-transfers",
          "hasTests": true
        },
        "getTopSymbolsByVolume": {
          "requestMethod": "GET",
          "description": "Returns top transferred token symbols by volume.",
          "route": "/api/v1/top-symbols-by-volume",
          "hasTests": true
        },
        "getTopCorridors": {
          "requestMethod": "GET",
          "description": "Returns top 100 token corridors by number of transfers.",
          "route": "/api/v1/top-100-corridors",
          "hasTests": true
        },
        "getKpiList": {
          "requestMethod": "GET",
          "description": "Returns Wormhole KPIs including volume, message count, and TVL.",
          "route": "/api/v1/scorecards",
          "hasTests": true
        }
      },
      "routeCount": 7
    },
    {
      "namespace": "x402",
      "name": "x402 Experimental MCP Interface",
      "description": "A test schema for verifying free and paid route behavior under FlowMCP v1.2.0",
      "tags": [],
      "docs": [
        "https://example.com/x402/docs"
      ],
      "flowMCP": "1.2.0",
      "requiredServerParams": [],
      "hasApiKey": false,
      "path": "x402/ping.mjs",
      "githubUrl": "https://github.com/FlowMCP/flowmcp-schemas/blob/main/schemas/v1.2.0/x402/ping.mjs",
      "routes": {
        "free_ping": {
          "requestMethod": "GET",
          "description": "Simple free route to verify server responsiveness",
          "route": "/ping",
          "hasTests": true
        },
        "paid_ping": {
          "requestMethod": "GET",
          "description": "Simulated paid route to test vault access",
          "route": "/vault/item",
          "hasTests": true
        }
      },
      "routeCount": 2
    }
  ],
  "stats": {
    "totalSchemas": 122,
    "totalRoutes": 530,
    "schemasWithApiKeys": 60,
    "namespaces": 69,
    "generatedAt": "2025-08-26T13:37:20.787Z"
  }
}